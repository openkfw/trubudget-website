"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[56509],{32777:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var s=r(85893),o=r(11151);const i={sidebar_position:3},n="Data model for projects",c={id:"developer/architecture/project-data-model",title:"Data model for projects",description:"Date: 17/04/2018",source:"@site/docs/developer/architecture/0003-project-data-model.md",sourceDirName:"developer/architecture",slug:"/developer/architecture/project-data-model",permalink:"/docs/developer/architecture/project-data-model",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/developer/architecture/0003-project-data-model.md",tags:[],version:"current",lastUpdatedBy:"MartinJurcoGlina",lastUpdatedAt:1722425965,formattedLastUpdatedAt:"Jul 31, 2024",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Access Control Model",permalink:"/docs/developer/architecture/access-control-model"},next:{title:"Resource-level lifetime",permalink:"/docs/developer/architecture/resource-level-lifetime"}},l={},a=[{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Definition of terms",id:"definition-of-terms",level:3},{value:"Relations",id:"relations",level:3},{value:"Options",id:"options",level:3},{value:"Decision",id:"decision",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Consequences",id:"consequences",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"data-model-for-projects",children:"Data model for projects"}),"\n",(0,s.jsx)(t.p,{children:"Date: 17/04/2018"}),"\n",(0,s.jsx)(t.h2,{id:"status",children:"Status"}),"\n",(0,s.jsx)(t.p,{children:"Accepted"}),"\n",(0,s.jsx)(t.h2,{id:"context",children:"Context"}),"\n",(0,s.jsx)(t.p,{children:"We need to define how to save and query project, subproject and workflow data efficiently."}),"\n",(0,s.jsx)(t.h3,{id:"definition-of-terms",children:"Definition of terms"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Project: Is the root element of the hierarchy. It contains metadata and Subprojects"}),"\n",(0,s.jsx)(t.li,{children:"Subproject: Are a subset of Projects and collect a number of Workflowitems"}),"\n",(0,s.jsx)(t.li,{children:"Workflowitems: Are a number of steps which need to be executed in a certain order"}),"\n",(0,s.jsx)(t.li,{children:"Resources: Projects, Subprojects, Workflowitems are resources. This means they contain permissions, a log and metadata."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"relations",children:"Relations"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-mermaid",children:"graph TD;\n    Project--\x3eSubproject_A;\n    Project--\x3eSubproject_B;\n    Subproject_A--\x3eWorkflowitem_A;\n    Subproject_A--\x3eWorkflowitem_B;\n    Subproject_B--\x3eWorkflowitem_C;\n    Subproject_B--\x3eWorkflowitem_D;\n"})}),"\n",(0,s.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Each resource has its own stream. Each resource has an array which links to the underlying resources (e.g. A Projects has an array of the ids of its Subrojects). That means if we want to query Subprojects of a specific Project, we need to lookup the Subproject ID's inside the projects to afterwards fetch all the underlying Subproject streams. ",(0,s.jsx)(t.strong,{children:"Pro:"})," We are only fetching the data which is necessary, changes inside the resources are storage efficient. ",(0,s.jsx)(t.strong,{children:"Con:"})," Resources with a high number of relations result in multiple (maybe hundreds) of queries."]}),"\n",(0,s.jsxs)(t.li,{children:["Each Project has its own stream. All relational resources of the projects are stored inside a JSON and resolved on the API Layer. ",(0,s.jsx)(t.strong,{children:"Pro:"})," Only one query necessary to resolve the whole resource tree for one project. ",(0,s.jsx)(t.strong,{children:"Con:"})," Large amount of storage needed, since every change inside a single resource would trigger a whole copy of the project tree. Large data structures have to be kept in memory"]}),"\n",(0,s.jsxs)(t.li,{children:["Each project has its own stream. All relational resources are organized with multiple key-items inside the project stream. This allows to specifically query resources with a single query. Updates to resources will only result in the copy of the affected resource. ",(0,s.jsx)(t.strong,{children:"Pro:"})," Easy to query, low storage / memory footprint ",(0,s.jsx)(t.strong,{children:"Con:"})," None"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"decision",children:"Decision"}),"\n",(0,s.jsx)(t.p,{children:"Since we need to be able to scale out to larger projects, it is important to be able to execute fast queries and having a low storage / memory footprint. The goal is to exploit the Multichain API as much as possible, since we can expect it to be more performant than our API. Option 3 is the option, which covers the required capabilities in the best way."}),"\n",(0,s.jsx)(t.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(t.p,{children:"Each project will have its own stream. It contains its own resources specific metadata inside specific keys (e.g. _logs, _permissions, _metadata). All underlying resources will be stored with specific key arrays."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Keys"}),(0,s.jsx)(t.th,{children:"Resource"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:'"_log"'}),(0,s.jsx)(t.td,{children:"Changelog of the project"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:'"_permissions"'}),(0,s.jsx)(t.td,{children:"Permissions of the project"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:'"_metadata"'}),(0,s.jsx)(t.td,{children:"Details of the project"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:'["subprojects", "<id of subproject>"]'}),(0,s.jsx)(t.td,{children:"Subproject"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:'["<id of subproject>_workflows", "<id of workflow>"]'}),(0,s.jsx)(t.td,{children:"Workflow"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"To efficiently query the resources we can execute the following commands:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Action"}),(0,s.jsx)(t.th,{children:"Command"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Get project details"}),(0,s.jsx)(t.td,{})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"List all subprojects"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"liststreamkeyitems projectx subprojects"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Get specific subproject details"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"liststreamkeyitems projectx tenderxyz"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"List workflows"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"liststreamkeyitems projectx tenderxyz_workflows"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Get specific workflow details"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"liststreamkeyitems projectx workflowxyz"})})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"consequences",children:"Consequences"}),"\n",(0,s.jsx)(t.p,{children:"With this solution we have a minimal amount a calls and fast retrieval of resource data. Performance tests need to be executed but we expect this method to scale well when the amount of resources grows"})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>c,a:()=>n});var s=r(67294);const o={},i=s.createContext(o);function n(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);