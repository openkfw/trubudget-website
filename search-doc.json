[{"title":"Access Control Model","type":0,"sectionRef":"#","url":"docs/developer/architecture/access-control-model","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#status","content":"Accepted "},{"title":"Context","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#context","content":"We need to define our approach to access-control/authorization. "},{"title":"Decision","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#decision","content":"Since our users' organizations differ a lot in terms of structures and policies, we need to have a very versatile access control mechanism in place. In the industry, the most used technique employed is role-based access control (RBAC). We base our mandatory access control (MAC) mechanism on RBAC, but use the notion of intentinstead of role (an intent can be executed by exactly one role, thus effectively replacing the role concept).  "},{"title":"Intents","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#intents","content":"An intent is what the user is trying to achieve, for example, &quot;add a workflow to a subproject&quot;. By using intents rather than roles, we side-step the problem found in many projects, where over time developers create similar roles on-the-fly, as from their point of view the implications of re-using a role are not always clear. Conversely, intents are always specific to a use case (examples: &quot;create project&quot; or &quot;list a project's subprojects&quot; rather than &quot;admin&quot; or &quot;user&quot;). While roles could be used to bundle intent-execution rights (e.g. have one role that is allowed to execute all &quot;view&quot; intents), we think that those roles would have to be managed by organizations themselves (as it will depend on their structure). Since in most cases this would mean a 1:1 mapping from role to user group, we skip roles altogether. "},{"title":"User Groups","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#user-groups","content":"Organizations group their users into user groups. For any given projects, each (resource-specific) intent has a list of user groups assigned to it; all users in the assigned groups are then allowed to execute the respective intent. +-------+ +---------------------+ +---------------+| User: | is member of | Group: | is allowed to | Intent: || Alice +--------------&gt;+ Project Maintainers +---------------&gt;+ Add workflow || | | | | to subproject |+-------+ +---------------------+ +---------------+ Copy "},{"title":"Implementation Pattern","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#implementation-pattern","content":"The goal is to enable us to follow a clear pattern for our access control needs: HTTP controllers call the domain modules and the authorization module (perhaps using a middleware), but do not deal with intents or groups.Domain modules may interact with the chain to fetch domain objects, and/or prepare closures to be authorized and executed later on. They deal with intents, but not with users or groups.Finally, the authorization module ensures that the user executing the intentbelongs to a group that is allowed to do that. In order to decide that, the module has to fetch resource-specific ACLs from the chain. Modifying ACLs is done in the same way: each resource's ACL specifies the groups that may execute the &quot;change this ACL&quot; intent (to be renamed). This hints at the necessity to provide defaults for ACLs when creating resources. "},{"title":"Resource-specific Access Control Lists (ACLs)","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#resource-specific-access-control-lists-acls","content":"With each resource/stream on the chain, an ACL stream-item is stored that lists for each intent the groups allowed to execute that intent: { &quot;acl&quot;: { &quot;view project&quot;: [&quot;all users&quot;], }, ...} Copy "},{"title":"Consequences","type":1,"pageTitle":"Access Control Model","url":"docs/developer/architecture/access-control-model#consequences","content":"With the proposed changes in place, our users will be able to impose their respective organizational structures onto TruBudget's resources in a way that should be flexible enough and straight-forward to integrate with their existing directory servers. "},{"title":"Decline Node Request","type":0,"sectionRef":"#","url":"docs/developer/architecture/decline-node","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Decline Node Request","url":"docs/developer/architecture/decline-node#status","content":"Accepted "},{"title":"Context","type":1,"pageTitle":"Decline Node Request","url":"docs/developer/architecture/decline-node#context","content":"We want to be able to decline node requests. The current api logic saves an event on the nodes stream for all nodes registered on the network. These nodes appear in the ui's nodes table as requests. So far, the requests that were not accepted would pile up and could not be deleted. When accepted, the nodes receive permissions from the MultiChain and can successfully connect to the system. Basic nodes receive the connect, send, receive, issue and create permissions, and admin nodes also have the mine, activate and admin permissions. For more details on these permissions check out the Multichain permissions management documentation. The opposite of the approval of nodes (which is actually a granting of permissions) would be to revoke these permissions. However, this would not lead to the desired outcome because the nodes would again appear in the list of requests as trying to connect to the network. "},{"title":"Decision","type":1,"pageTitle":"Decline Node Request","url":"docs/developer/architecture/decline-node#decision","content":"As MultiChain doesn't offer a possibility to decline nodes, we want to save an event on the nodes stream that mentions that a node was declined and by what organization. This way, when listing the nodes, the ones that appear in the stream as declined will be hidden from all nodes belonging to the decliner organization. In order to promote transparency, every node in the network should see if a node has been declined by another orga. "},{"title":"Consequences","type":1,"pageTitle":"Decline Node Request","url":"docs/developer/architecture/decline-node#consequences","content":"A new endpoint /network.declineNode will be created that sends the request to decline a node. Apart from the node.registered event a new type of event can now be saved on the nodes stream node.declined. When calling the /network.listendpoint, an additional field decliners should be used to list the decliners of each node. "},{"title":"Basic architecture overview","type":0,"sectionRef":"#","url":"docs/developer/architecture/execution-architecture-overview","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Basic architecture overview","url":"docs/developer/architecture/execution-architecture-overview#status","content":"Accepted "},{"title":"Context","type":1,"pageTitle":"Basic architecture overview","url":"docs/developer/architecture/execution-architecture-overview#context","content":"We need an overview for the execution architecture "},{"title":"Decision","type":1,"pageTitle":"Basic architecture overview","url":"docs/developer/architecture/execution-architecture-overview#decision","content":"TruBudget can be deployed either locally or in the cloud using Docker. Interfaces are exposed via web interface and via blockchain connection.  "},{"title":"Architecture Decision Records","type":0,"sectionRef":"#","url":"docs/developer/architecture/intro","content":"Architecture Decision Records An architectural decision record (ADR) is a document that captures an important architectural decision made along with its context and consequences. For more information about what an ADR is visit the Architecture decision record project on GitHub. Following table shows a list of TruBudget's ADRs: Title\tLinkRecord Architecture Decisions (ADRs)\tRecord architecture decisions Access Control Model/Authorization\tAccess control model Project Data Model\tProject data model Resource (e.g.,Project,Subproject) Lifetime\tRessource-level lifetime Workflowitem Ordering\tWorkflowitem ordering Multi Node Setup (Superceded)\tMulti-node setup Basic Execution Architecture\tExecution-architecture Overview Git Branching/Releasing Model\tGit branching model Multichain Migration Model\tMigration model Multi Node Setup/Address Private Key Handling\tMulti-node setup","keywords":""},{"title":"Migration Model","type":0,"sectionRef":"#","url":"docs/developer/architecture/migration-model","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#status","content":"Draft "},{"title":"Context","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#context","content":"This ADR discusses how to handle breaking schema changes of the data-model in the context of a distributed application (TruBudget). "},{"title":"Explanation of the current implementation","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#explanation-of-the-current-implementation","content":"Data is currently stored in streams. A stream contains none, 1, or multiple items. These items can either represent the complete data-set at time of creation or data change (for example an event). In streams that represent the complete data in every item, the last item represents the current state. In streams where items only contain data changes, the items are sourced from the first to the latest in order to get the current state of the data (event-sourcing). Items which represent complete data-sets are called Ressource. Items which contain only data changes are called Event. In order to be able to change the interface of Event a Event.dataVersion field can be defined describing the interface version of the Event. An item of type Ressource currently doesn't contain a dataVersion field. Furthermore it is generally using HEX as a dataformat, instead of JSON which is used as dataformat for EVENTS For items of type Event the dataVersion is only checked when performing a read requests. When performing a write/publish request to streams containing items from type Event no check is performed. "},{"title":"Subject for change","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#subject-for-change","content":"Before the upcoming release we want to unify the dataformats. More precisly the plan is to get rid of the HEX dataformat and only use JSON. Hence, we have to introduce a breaking change regarding in our items of type Ressource. Items created by a node running the new version of Trubudget will be in JSON and can't be read by Nodes running an older version of TruBudget (which is expecting HEX). For changing the dataformat in the current case there is no technical solution, how to gracefully migrate. Hence, we will do it on an organisational level (updating all versions simultanously). But for future updates we want to be better prepared handling version conflicts between different distributed nodes in a TruBudget network. "},{"title":"Options","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#options","content":"In general we need to distinguish on how data is read from the stream. For streams containing items of type Event and doing event-sourcing the newest version needs to be able to read items of older version. If an older version of a node tries to read a stream which contains items of a newer version, it is not able to do so and returns an error. For streams containing items of type Ressource only the last element is read. It is pretty much the same: New versions can read stream with items of older versions. But not vice-versa. The only difference is: Since only the last item is read from the stream, old data versions could be migrated resulting in removing source-code which is needed to read the older versions of the item. Things get more complicated for write operations: For streams containing items of type Event it makes no sense for a node with the old data-version to write, since it might not be able to read it upfront or afterwards. For streams containing items of type Ressource it is pretty much the same. "},{"title":"Decision","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#decision","content":"Since read and write operation might return errors for nodes running an older dataVersion, these nodes need to be forced to upgrade to a newer version if they still want to participate in the network. This means: Nodes with older dataVersion are not allowed to write to streamsNodes with older dataVersion are allowed to read, but might not be able to get the most recent dataItems of type Event or Ressource extend a DataVersion interfaceThe network is aware of all nodes and it's versions (in order to inform them if they run on an old version). "},{"title":"TODOs","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#todos","content":"Change Hex to JSON format# Every item, which is written to a stream has JSON as datatype and should extend the DataVersion interface (e.g. Ressource, Event, Vault) Use a DataVersion interface for all three interfaces (Event, Resource, Vault) interface DataVersion {dataVersion: number} interface Resource extends DataVersion {....} Copy Set new version in network# We create a multichain stream named &quot;versions&quot; where all dataversion should be saved. On startup every node checks its version and updates the stream if it is higher. streamname : versions { keys: [&quot;1&quot;] data: { json: { dataVersion: 1, any: [this is a example of the data-format in this version] } }} Copy Track versions in network# We currently track all nodes that have been registered in the network. For every node an item is saved to the nodes stream. We also have to save an item if the node's dataVersion increases to track versions of every node in the network. streamname: nodes node-address: &quot;1axuNPTudeCHHBwhJD5tYtRaaGWGpkTon5qd&quot; { &quot;keys&quot; : [ &quot;1axuNPTudeCHHBwhJD5tYtRaaGWGpkTon5qd&quot; ], &quot;data&quot; : { &quot;json&quot; : { &quot;key&quot; : &quot;1axuNPTudeCHHBwhJD5tYtRaaGWGpkTon5qd&quot;, &quot;intent&quot; : &quot;network.registerNode&quot;, &quot;createdBy&quot; : &quot;&lt;system&gt;&quot;, &quot;createdAt&quot; : &quot;2018-11-12T09:57:19.104Z&quot;, &quot;dataVersion&quot; : 1, &quot;data&quot; : { &quot;address&quot; : &quot;1axuNPTudeCHHBwhJD5tYtRaaGWGpkTon5qd&quot;, &quot;organization&quot; : &quot;ACMECorp&quot; } } }} Copy Prohibit writing with older version when newer version is set# Before every write operation, the version needs to be checked. The most efficient way to do so is to query the streamkeys with liststreamkeys of the versions stream. "},{"title":"Consequences","type":1,"pageTitle":"Migration Model","url":"docs/developer/architecture/migration-model#consequences","content":"an upgraded node might disable all other nodes because nodes with an older version cannot read/write to the multichain in old data-versionsall items in any stream have a dataVersion fieldversion needs to be checked before every write operation "},{"title":"Git Branching Model","type":0,"sectionRef":"#","url":"docs/developer/architecture/git-branching-model","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Git Branching Model","url":"docs/developer/architecture/git-branching-model#status","content":"Accepted "},{"title":"Context","type":1,"pageTitle":"Git Branching Model","url":"docs/developer/architecture/git-branching-model#context","content":"Currently, branches are used to draft releases. Going forward, the branching model needs to satisfy the following criteria: Releases need to be tagged to ensure that, given a release name, the commit sha can be inferred.We need to support multiple networks (chains), but they are not necessarily running the same version of TruBudget.Each network should have its own deployment URL that does not change on non-breaking version updates.Conversely, in case of breaking changes, the deployment URL should be changed. "},{"title":"Decision","type":1,"pageTitle":"Git Branching Model","url":"docs/developer/architecture/git-branching-model#decision","content":"master continues to be the main development branch. Releases are tagged using an annotated Git tag (optionally signing the tag) like this: git tag -a &quot;v2.0.0-beta.1&quot; -m &quot;version 2.0.0-beta.1&quot; Copy For each network, there is a Git branch prefixed by the major version the network is running on - major version upgrades are assumed to break compatibility with the network. For example, branch names may look like this: 1.x.x_my-example-network1.x.x_my-other-example-network2.x.x_network-running-a-newer-version Copy Note that a branch 1.x.x_ACMECorp-UmbrellaCorp that is running tag v1.0.0 may upgrade to a newer minor version like v1.1.0, but cannot upgrade to a 2.x release. If the ACMECorp and the UmbrellaCorp decide to upgrade to the 2.x series of TruBudget, they need to migrate to a new branch called 2.x.x_ACMECorp-UmbrellaCorp. The definition of the necessary processes is not in scope of this ADR. Additionally, there is one release branch for each major version that tracks the most current release (tag) for that major version. The steps required for making a new release are: Increase the version number (see #33).Update the CHANGELOG.md file to reflect the release.Tag the commit on the master branch (see above).Checkout the release branch of the current major version (e.g. release_1.x.x) and git merge master. As soon as a network is ready to be upgraded to the new version, its branch may be updated: Checkout the network branch, e.g. 1.x.x_my-example-network.Merge-in the release branch (or a specific tag), e.g. git merge release_1.x.x. "},{"title":"Consequences","type":1,"pageTitle":"Git Branching Model","url":"docs/developer/architecture/git-branching-model#consequences","content":"The Git history shows when a release happened and who released it. Also, there is no confusion between releases and branches.The URL stays the same as long as all nodes in the network are compatible with each other. The URL does change, however, for changes that break compatability among nodes in the network, as this warrants a new major version number.It is straightforward to roll out updates to different networks running the same major version of TruBudget. "},{"title":"Multi-node setup","type":0,"sectionRef":"#","url":"docs/developer/architecture/multi-node-setup","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#status","content":"Superceded by multi node setup "},{"title":"Context","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#context","content":"Even though Multichain (like Bitcoin) has to be bootstrapped from a single node, we're aiming at a system design that doesn't rely on a single party being involved in most administrative tasks, such as adding additional nodes to an existing deployment. This ADR discusses terminology and setup of the TruBudget network. "},{"title":"Decision","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#decision","content":""},{"title":"Terminology","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#terminology","content":"Each node is associated to a single organization (e.g. ACMECorp, UmbrellaCorp), including the special origin node, which mines the first block in the network. Nodes that belong to the same organization are called internal peers; nodes that belong to other organizations are called external peers. "},{"title":"Blockchain Addresses","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#blockchain-addresses","content":"User authenticate themselves using username and password, but internally every user is assigned a blockchain address, along with a public and a secret key. On the chain, each action is then associated with the user's key and the associated permissions, which makes operations secure and auditing reliable. With Multichain, each node owns a unique address, generated when started the first time (its wallet address). In day-to-day operations, those addresses are not used and only the address of the first node of an organization is put on the chain (and thus propagated among nodes). By mining the genesis block (that is, the first block in the network), the origin node gets full permissions on everything, which includes exclusive access to the root stream. The permissions are bound to the origin-node's address; we call the associated key origin root key (ORK). The ORK is not put on the chain and should be backed up by the administrator; it is also not used in day-to-day operations. Instead, the ORK is used to create another node address that holds necessary permissions; that key is called organization key. "},{"title":"Distributing secret keys","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#distributing-secret-keys","content":"The organization key is put on the chain, into a stream-item on the organization's stream, called the vault. The vault holds the private keys of all (technical and non-technical) users of the organization. In order to prevent other organizations from using them, the vault needs to be encrypted. The encryption key is a shared secret known to all internal peers, called the organization vault secret (OVS). Whenever the vault is updated, all internal peers import new keys into their wallet (using a walletnotify script) a user logs in, the user's private key is read from the vault and imported into the node's wallet, which allows users to move freely between their organization's nodes. "},{"title":"Joining the network","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#joining-the-network","content":"There are two ways an organization can join the network: The organization maintains the origin node, in which case the ORK is used to create the organization key (see above).For all other organizations, the first node needs to connect to any node of an organization that has trusted access (see below). Trusted vs. managed access# In the TruBudget network, there are two types of organizational access to the network: admin and basic. The main difference is that with admin the node can also mine and write to so-called &quot;admin&quot; streams. In TruBudget, each organization should have exactly one address (the organization address) with admin permissions; all other node addresses should have basic access only. This ensures that a single organization cannot manipulate the network without other organizations noticing. In other words, connecting as a new organization B to an existing TruBudget network of organization A works as follows: A gives B the API URL of any one of their nodes.B runs TruBudget for the first time, pointing it to the given URL. Since the instance address is unknown to A's node, the connection fails; instead, the administrator of A will see the connection request in TruBudget's connection dashboard. Meanwhile, the node of B continues its connection attempts.The administrator of A verifies the address by calling B, asking them for confirmation. The administrator then chooses &quot;trusted access&quot; for the connection request. The address of the node of B is now B's organization key.Now that the connect permission has been granted, B's node is finally able to establish a connection, joining the network and fetching all existing data in the process. Since the organization stream for B is not yet present, the node infers it's B's first node; consequently, the node creates the organization stream and initializes the &quot;vault&quot; stream-item with its encrypted private key (= organization key). With managed access, the connecting organization cannot execute the last step itself. sequenceDiagramparticipant A as Orga A (trusted access)participant B as Orga B, node 1participant B2 as Orga B, node 2B-&gt;&gt;A:connectA-&gt;&gt;A:Multichain: B has no connect permissionA-&gt;&gt;A:Add connection attempt to dashboardA--&gt;&gt;B:connection denied!A-&gt;&gt;A:Admin validates the address, approves &quot;trusted access&quot;B-&gt;&gt;A:connectA-&gt;&gt;A:Multichain: B has connect permissionA--&gt;&gt;B:connection established!B-&gt;&gt;B:Initialize own organization streamB-&gt;&gt;B:Encrypt own private key with vault key and set as vaultB2-&gt;&gt;B:connectnote over B,B2:same procedure, except node 2 uses existing organization stream and doesn't add own private key to vault (it imports the existing one instead). Copy "},{"title":"User Management","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#user-management","content":"N Users &lt;-&gt; 1 Organization As mentioned above, each organization's users have their addresses and private keys stored in the organization's vault, which is encrypted using the organization vault secret (OVS). The OVS is initialized using the VAULT_SECRET environment variable. Consequently, all client-related operations are only possible on nodes that have the right OVS set in their environment (typically equal to the nodes that belong to the same organization as the requesting user): user creation, as it directly modifies the vaultauthentication, since it causes the user's private key to be imported in the node's wallet, which in turn requires read access to the vaultall other API calls, as the token is always augmented with the user's private key, which requires read access to the vault To ease testing (and because it doesn't affect production), a node always tries to decrypt the vault that belongs to the user's organization, without checking first whether it belongs to that organization itself. A node always belongs to a single organization, but using the same OVSs for all organizations enables a node to cater all API requests (not to be done in production, because then all nodes have all keys of all users of all organizations in their wallet, basically circumventing all other security mechanisms). "},{"title":"Consequences","type":1,"pageTitle":"Multi-node setup","url":"docs/developer/architecture/multi-node-setup#consequences","content":"This ADR describes the general idea behind the setup. "},{"title":"Node Status","type":0,"sectionRef":"#","url":"docs/developer/architecture/node-connection-info","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Node Status","url":"docs/developer/architecture/node-connection-info#status","content":"Accepted "},{"title":"Context","type":1,"pageTitle":"Node Status","url":"docs/developer/architecture/node-connection-info#context","content":"We want to be able to display more info regarding the status of the nodes connected to the network. A useful feature would be to display if a node is still connected or not and also to see a &quot;last seen&quot; timestamp of the nodes. "},{"title":"Decision","type":1,"pageTitle":"Node Status","url":"docs/developer/architecture/node-connection-info#decision","content":"In order for the connection status to be displayed, an endpoint checking the multichain's getpeerinfo function would be called. This returns the nodes connected at the moment. However, since MultiChain doesn't provide information about when a node was last seen we want to implement this feature in the api. A new stream should be created called network_log and every 24h an event would be saved on the stream displaying the addresses of the nodes connected at that moment. All nodes in the network perform the check but only saves it on the stream if there is no event saved for that day. This way, the check is being recorded even if one of the nodes is disconnected but it is also prevents duplicate entries. "},{"title":"Consequences","type":1,"pageTitle":"Node Status","url":"docs/developer/architecture/node-connection-info#consequences","content":"The network.list endpoint also need to be adapted to display the information mentioned above. When nodes are listed, the field isConnected should also show the connection status and the lastSeen, which shows on what date the node was last connected. "},{"title":"Data model for projects","type":0,"sectionRef":"#","url":"docs/developer/architecture/project-data-model","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#status","content":"Accepted "},{"title":"Context","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#context","content":"We need to define how to save and query project, subproject and workflow data efficiently. "},{"title":"Definition of terms","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#definition-of-terms","content":"Project: Is the root element of the hierarchy. It contains metadata and SubprojectsSubproject: Are a subset of Projects and collect a number of WorkflowitemsWorkflowitems: Are a number of steps which need to be executed in a certain orderResources: Projects, Subprojects, Workflowitems are resources. This means they contain permissions, a log and metadata. "},{"title":"Relations","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#relations","content":"graph TD; Project--&gt;Subproject_A; Project--&gt;Subproject_B; Subproject_A--&gt;Workflowitem_A; Subproject_A--&gt;Workflowitem_B; Subproject_B--&gt;Workflowitem_C; Subproject_B--&gt;Workflowitem_D; Copy "},{"title":"Options","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#options","content":"Each resource has its own stream. Each resource has an array which links to the underlying resources (e.g. A Projects has an array of the ids of its Subrojects). That means if we want to query Subprojects of a specific Project, we need to lookup the Subproject ID's inside the projects to afterswards fetch all the underlying Subproject streams. Pro: We are only fetching the data which is necessary, changes inside the resources are storage efficent. Con: Resources with a high number of relations result in multiple (maybe hundreds) of queries.Each Project has its own stream. All relational resources of the projects are stored inside a JSON and resolved on the API Layer. Pro: Only one query necessary to resolve the whole resource tree for one project. Con: Large amount of storage needed, since every change inside a single resource would trigger a whole copy of the project tree. Large datastructures have to be kept in memoryEach project has its own stream. All relational resources are organized with multiple key-items inside the project stream. This allows to specifically query resources with a single query. Updates to resources will only result in the copy of the affected resource. Pro: Easy to query, low storage / memory footprint Con: None "},{"title":"Decision","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#decision","content":"Since we need to be able to scale out to larger projects, it is important to be able to execute fast queries and having a low storage / memory footprint. The goal is to exploit the Multichain API as much as possible, since we can expect it to be more performant than our API. Option 3 is the option, which covers the required capabilities in the best way. "},{"title":"Implementation","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#implementation","content":"Each project will have its own stream. It contains its own resources specific metadata inside specific keys (e.g. _logs, _permissions, _metdata). All underlying resources will be stored with specific key arrays. Keys\tResource&quot;_log&quot;\tChangelog of the project &quot;_permissions&quot;\tPermissions of the project &quot;_metdata&quot;\tDetails of the project [&quot;subprojects&quot;, &quot;\\&lt;id of subproject&gt;&quot;]\tSubproject [&quot;\\&lt;id of subproject&gt;_workflows&quot;, &quot;\\&lt;id of workflow&gt;&quot;]\tWorkflow To efficiently query the resources we can execute the following commands: Action\tCommandGet project details List all subprojects\tliststreamkeyitems projectx subprojects Get specific subproject details\tliststreamkeyitems projectx tenderxyz List workflows\tliststreamkeyitems projectx tenderxyz_workflows Get specific workflow details\tliststreamkeyitems projectx workflowxyz "},{"title":"Consequences","type":1,"pageTitle":"Data model for projects","url":"docs/developer/architecture/project-data-model#consequences","content":"With this solution we have a minimal amount a calls and fast retrieval of resource data. Performance tests need to be executed but we expect this method to scale well when the amount of resources grows "},{"title":"Multi node setup and user management","type":0,"sectionRef":"#","url":"docs/developer/architecture/multi-node-setup-and-user-management","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#status","content":"Draft "},{"title":"Context","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#context","content":"Even though Multichain (like Bitcoin) has to be bootstrapped from a single node, we're aiming at a system design that doesn't rely on a single node being involved in most administrative tasks, such as adding additional nodes to an existing deployment. This ADR discusses terminology and setup of the TruBudget network. "},{"title":"Decision","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#decision","content":""},{"title":"Terminology","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#terminology","content":"Each node is associated to a single organization (e.g. ACMECorp, UmbrellaCorp). The origin node refers to the one node, which mines the first block in the whole network. Nodes that belong to the same organization are called internal peers, nodes that belong to other organizations are called external peers. The organization's address is used to identify the organization in the network. The private key is used to authenticate members of the organization, it is encrypted using the ORGANIZATIONVAULT_SECRET. The ORGANIZATION_VAULT_SECRET is a shared key between internal peers used to en-/decrypt the private key. It is saved in an environment variable on the API host of a node. A user is a member of an organization. To access the Trubudget API, the user is given a username and password. When performing actions (which are described by their _intent, e.g. &quot;project.create&quot; or &quot;global.addUser&quot;) the API writes this action in form of an event to the blockchain. An event describes a performed action like creating a project or adding users and holds meta data like timestamp or creator. Example for creating a group &quot;MyGroup&quot; with users &quot;user1&quot; and &quot;user2&quot;: { &quot;key&quot;: &quot;123&quot;, &quot;intent&quot;: &quot;global.createGroup&quot;, &quot;createdBy&quot;: &quot;root&quot;, &quot;createdAt&quot;: &quot;2018-12-17T14:52:11.511Z&quot;, &quot;dataVersion&quot;: 1, &quot;data&quot;: { &quot;group&quot;: { &quot;groupId&quot;: &quot;123&quot;, &quot;displayName&quot;: &quot;MyGroup&quot;, &quot;users&quot;: [&quot;user1&quot;, &quot;user2&quot;] } }} Copy The first data added to the blockchain is the organization's address and (encrypted) private key: { &quot;publishers&quot;: [&quot;1bNueyVy4j7V6yRSa6SDyHhkfVBHyFJ4QoAiD4&quot;], &quot;keys&quot;: [&quot;address&quot;], &quot;offchain&quot;: false, &quot;available&quot;: true, &quot;data&quot;: { &quot;json&quot;: { &quot;address&quot;: &quot;1bNueyVy4j7V6yRSa6SDyHhkfVBHyFJ4QoAiD4&quot;, &quot;privkey&quot;: &quot;151fca5bbb689321a410c5646cc81a582c7bdade7365a806c994b530b9f28689e67b29af306996f0e95ea47a0ec66fc0bca9c78b7ce7510f71e95111a476d0cb6799b431b249d5a632ddc45aa1984f8fe8c2bcbd903bc6d9c6b8ba8458efb5b5&quot; } }, &quot;confirmations&quot;: 8, &quot;blocktime&quot;: 1545054793, &quot;txid&quot;: &quot;c3ce3a37669d7ce005c7813a1e9a97152fac873cc9149ad81eadea5f78c6718e&quot;} Copy "},{"title":"Distributing secret keys","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#distributing-secret-keys","content":"In order to prevent other organizations from using the private key, it is encrypted. The encryption key is a shared secret known to all internal peers, called the organization vault secret (OVS). Each internal peer uses the address and private key of the first node of its organization after joining the network. Each action of any user is published to the multichain using the corresponding organization's private key ,no matter through which internal peer he/she is connected. Sidenote: Each user has their own pair of address and private key which is held by a streamitem on the users stream, which currently is not in use. (In the future whenever a user logs in, the user's address should be read from the users stream. Then this keypair is used to publish any data using command publishfrom) "},{"title":"Creating a network","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#creating-a-network","content":"To create a new network the origin node creates the genesis block (i.e. the first block of a blockchain) and the multichain creates the organization's address and private key. The new organization creates its own stream (e.g. org:ACMECorp) and writes its address and encrypted private key to the first streamitem ([see above](# Terminology)). "},{"title":"Joining the network","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#joining-the-network","content":"Joining as new organization# In this case, a new organization wants to join an already existing network. Example: ACMECorp already has one note in the network and UmbrellaCorp wants to join. A = Orga A (e.g. ACMECorp) B = Orga B (new organization, e.g. UmbrellaCorp) sequenceDiagramparticipant A as Orga Aparticipant B as Orga BB-&gt;&gt;A:connectA-&gt;&gt;A:Multichain: B has no connect permissionA-&gt;&gt;A:Add connection attempt to dashboardA--&gt;&gt;B:connection denied!A-&gt;&gt;A:Admin validates the address. If more than 50% of all organizations in the network validates the address, the new organization is approved.B-&gt;&gt;A:connectA-&gt;&gt;A:Multichain: B has connect permissionA--&gt;&gt;B:connection established!B-&gt;&gt;B:Initialize own organization streamB-&gt;&gt;B:Encrypt own private key with *organization vault secret* and save it to its organization stream Copy Joining as new node of an existing organization# In this case a new node from an organization that already has a node in the network wants to join. Example: ACMECorp has one node in the network and a new ACMECorp node wants to join the network. The main difference here is, that you only need the approval of one admin user from another node in the network. Important: Even though the new node of the organization has its own address, only the address and private key of the already existing node is used for future transactions. It is therefore absolutely necessary that both nodes have the same ORGANIZATION_VAULT_SECRET. Node A = first node of Orga A (e.g. ACMECorp) Node A2 = second node of Orga A sequenceDiagramparticipant A as Node Aparticipant B as Node A2A-&gt;&gt;A: creates organization stream with organization key-pairB-&gt;&gt;A: connect with A2 node addressA-&gt;&gt;A: Multichain: A2 has no connect permissionA-&gt;&gt;A: Add connection attempt to dashboardA--&gt;&gt;B: connection denied!A-&gt;&gt;A: *One* admin of any organization in the network approves the new node.B-&gt;&gt;A: connectB-&gt;&gt;B: read organization key-pair from stream and import into local wallet Copy "},{"title":"Consequences","type":1,"pageTitle":"Multi node setup and user management","url":"docs/developer/architecture/multi-node-setup-and-user-management#consequences","content":"for each type of streamitem (e.g. project, users) a specific data-version can be set. "},{"title":"Record architecture decisions","type":0,"sectionRef":"#","url":"docs/developer/architecture/record-architecture-decisions","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Record architecture decisions","url":"docs/developer/architecture/record-architecture-decisions#status","content":"Accepted "},{"title":"Context","type":1,"pageTitle":"Record architecture decisions","url":"docs/developer/architecture/record-architecture-decisions#context","content":"We need to record the architectural decisions made on this project. "},{"title":"Decision","type":1,"pageTitle":"Record architecture decisions","url":"docs/developer/architecture/record-architecture-decisions#decision","content":"We will use Architecture Decision Records, as described by Michael Nygard in this article: http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions "},{"title":"Consequences","type":1,"pageTitle":"Record architecture decisions","url":"docs/developer/architecture/record-architecture-decisions#consequences","content":"See Michael Nygard's article, linked above. "},{"title":"Resource-level lifetime","type":0,"sectionRef":"#","url":"docs/developer/architecture/ressource-level-lifetime","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Resource-level lifetime","url":"docs/developer/architecture/ressource-level-lifetime#status","content":"Draft "},{"title":"Context","type":1,"pageTitle":"Resource-level lifetime","url":"docs/developer/architecture/ressource-level-lifetime#context","content":"Resources have semantically a certain lifetime. That means, after a resources is created it will experience state-transition until it reaches the end of its lifetime (e.g. archival). The lifetimes and state-transitions need to be defined in an abstract way, in order to allow the platform to excel for different use-cases. "},{"title":"Decision","type":1,"pageTitle":"Resource-level lifetime","url":"docs/developer/architecture/ressource-level-lifetime#decision","content":""},{"title":"Lifetime of a single resource","type":1,"pageTitle":"Resource-level lifetime","url":"docs/developer/architecture/ressource-level-lifetime#lifetime-of-a-single-resource","content":"graph TDA[Create resource] --&gt;|Auto-assign to creator| BB[State: Open] --&gt; |Do work|BB --&gt; |Assign to somebody who can close| CC[State: Open &amp; Ready to close] --&gt; |Close| DD[Resource closed] Copy Re-Opening is not supported; it could be discussed as long as the parent is still open (hierarchy must hold). Different usage-scenarios are acommodated via manual steps. Example: 4-Eyes Principle# Scenario: A subproject must only be closed when 2 people A &amp; B (e.g. different departments) checked it. Prereqs: Closing right is given to an administrative person and not to the people signing off Approach: Subproject is executed as usual, then for sign-off is assigned to Person ASign-Off Person A enters a Workflow-Item validating the state and assigns Person BSign-Off Person B enters a Workflow-Item validating the state and assigns to administrative personell that has the close-rightsAdministrative person checks whether all required sign-offs are there and then finally closes; otherwise assigns back "},{"title":"Impact to child resources","type":1,"pageTitle":"Resource-level lifetime","url":"docs/developer/architecture/ressource-level-lifetime#impact-to-child-resources","content":"A resource hierarchically describes a node in a tree-like structure. Therefore we need to look at impact of a closed resource to other nodes in the tree. If a resource has no children, there is no impact on other resources. If a resource has children (e.g. subprojects / workflowitems), the resource cannot be closed. All children need to be in state closed before a parent can be closed. graph TD; Project--&gt;Subproject_A; Project--&gt;Subproject_B; Subproject_A--&gt;Workflowitem_A; Subproject_A--&gt;Workflowitem_B; Subproject_B--&gt;Workflowitem_C; Subproject_B--&gt;Workflowitem_D; Copy "},{"title":"Implementation","type":1,"pageTitle":"Resource-level lifetime","url":"docs/developer/architecture/ressource-level-lifetime#implementation","content":"This ADR is desigend to enable a MVP implementation. Implementation consists of a check before closing a project whether all subprojects have already been closed. "},{"title":"Consequences","type":1,"pageTitle":"Resource-level lifetime","url":"docs/developer/architecture/ressource-level-lifetime#consequences","content":"Re-opening is not supportedNo automatic closing in hierarchy for nowSystem blocks closing if there are open childrenNo system-support for specific usage patterns This approach is on-purpose very lightweight and agnostic to usage pattern. Once needs are understood better system support for scenarios like 4-eyes-principle can be established through a new / updated ADR and formally manifested in the ledger in machine-readable format. "},{"title":"Workflowitem-ordering","type":0,"sectionRef":"#","url":"docs/developer/architecture/workflowitem-ordering","content":"","keywords":""},{"title":"Status","type":1,"pageTitle":"Workflowitem-ordering","url":"docs/developer/architecture/workflowitem-ordering#status","content":"Draft "},{"title":"Context","type":1,"pageTitle":"Workflowitem-ordering","url":"docs/developer/architecture/workflowitem-ordering#context","content":"Workflowitems are sorted by their creation time by default, but there needs to be some mechanism that allows for manual sorting as well (mainly relevant for the UI). Previously, each workflowitem would hold a pointer to the previous item in the list. However, this approach cannot prevent an inconsistent state if there is a data race between two concurrent requests: it may happen that two workflowitems share the same pointer (turning the list into a tree). "},{"title":"Decision","type":1,"pageTitle":"Workflowitem-ordering","url":"docs/developer/architecture/workflowitem-ordering#decision","content":"We solve this by maintaining the ordering as a list, stored with the subproject the workflowitems belong to: subproject stream: stream item &quot;workflowitem_ordering&quot; =&gt; { data: [id1, id2, ...], log: [], permissions: {}} Copy Note that we use the resource structure here simply to be able to treat the record like any other, but log and permissions have no meaning at the time of writing. Since Multichain doesn't offer transactions for stream operations, we cannot guarantee that a newly created workflowitem would always be recorded in the list, so we apply the following trick when computing the ordering: Workflowitems that are included in the workflowitem-ordering are included in the result exactly in that ordering;all remaining workflowitems are sorted by their creation time and appended to the result. Because workflowitems are sorted by their creation time by default, newly created items do not have to be added to the ordering, so no inconsistensies can occur. "},{"title":"Consequences","type":1,"pageTitle":"Workflowitem-ordering","url":"docs/developer/architecture/workflowitem-ordering#consequences","content":"Using this approach, we get the following properties: Without setting an ordering through an API call, the ordering list is empty and all items are sorted by their creation time.When an ordering is set, it is respected when returning workflowitems.The case of concurrent requests: Concurrent creation causes both items to be appended to the list, ordered by their creation time, or in arbitrary order in case the creation times are equal.Concurrent updates of the ordering is a race with all-or-nothing semantics: whoever finished the update last wins, and there can never be any inconsistencies. If an update to the ordering does not include a workflowitem that was not present when the request was issued, when returning the ordered list of workflowitems, the missing workflowitem is simply set as the last element (which makes sense: it is the newest workflowitem, after all). "},{"title":"How to write documentation for TruBudget","type":0,"sectionRef":"#","url":"docs/developer/documentation","content":"","keywords":""},{"title":"Why?","type":1,"pageTitle":"How to write documentation for TruBudget","url":"docs/developer/documentation#why","content":"As you might have seen, TruBudget stores all relevant documentation in the docs folder of the main repository. While reading the documentation in Markdown using a dedicated markdown reader is possible and quite easy for people working in tech, user with no tech background can have a hard time reading, and navigating through the documentation. This is why the docs folder in this repo is linked with the TruBudget Website. When a new TruBudget version is released, the CI has an additional step which publishes the current documentation (in the docs folder) on the TruBudget Website. "},{"title":"What is different to standard Markdown?","type":1,"pageTitle":"How to write documentation for TruBudget","url":"docs/developer/documentation#what-is-different-to-standard-markdown","content":"The TruBudget Website is build using Docosaurus. A static website generator optimized for publishing documentation. Docosaurus supports the standard Markdown syntax, MDX and React for defining and styling pages. Although sometimes React features might come in handy, avoid them. While MD and MDX is partially supported by GitHub, React features are not. "},{"title":"The Syntax","type":1,"pageTitle":"How to write documentation for TruBudget","url":"docs/developer/documentation#the-syntax","content":"The TruBudget Documentation heavily uses two features from Docosaurus: AdmonitionsAutogenerated sidebar metadata Admonitions are used to provide extra information such as notes, tips, or to make a user conscious about the possible side effects of an operation. Autogenerated sidebar metadata are used to determine the position of the document in the sidebar. This feature is mostly used when there are multiple folders in the directory. "},{"title":"Contributing to TruBudget","type":0,"sectionRef":"#","url":"docs/developer/introduction","content":"","keywords":""},{"title":"Table of Contents","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#table-of-contents","content":"Contributing to TruBudget Table of ContentsCode of ConductHow to get started with TruBudgetHow to ask for supportHow to contribute Create an issueOpen a Pull RequestDon't forget to update the changelog! Styleguides Git CommitsGit BranchesGit Workflow Architecture DecisionsSource Layout "},{"title":"Code of Conduct","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#code-of-conduct","content":"This project and everyone participating in it is governed by our Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to Jure Zakotnik, who is the current project maintainer. "},{"title":"How to get started with TruBudget","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#how-to-get-started-with-trubudget","content":"If this is your first time starting TruBudget, you should follow the Developer Setup for setting up the project. "},{"title":"How to ask for support","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#how-to-ask-for-support","content":"If you need to ask for support feel free to reach out to us on [discussions], check out the existing documentation or create a new github issue "},{"title":"How to contribute","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#how-to-contribute","content":""},{"title":"Create an issue","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#create-an-issue","content":"Feel free to help out if you noticed a bug or if you want to suggest a new feature by simply opening a new github issue "},{"title":"Open a Pull Request","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#open-a-pull-request","content":"When working on a feature, you can open a PR in as soon as you push the first changes. Please make sure you follow these guidelines regarding PRs: Make sure that the PR description clearly describes what you are working onIf aplicable, mention what issue will be closed with this pull request, by typing Closes #issueNumberDescribe how you are planning on implementing the soultion, maybe by creating a TODO listThe PR should be in draft mode if you're still making some changes. If it is ready to be reviewed then mark it as &quot;Ready for review&quot; "},{"title":"Don't forget to update the changelog!","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#dont-forget-to-update-the-changelog","content":"If you make changes that are relevant to the end user you should add an entry in the CHANGELOG.md file, which can be found in the root folder of the project. Before adding to the changelog, you should read these guidelines "},{"title":"Styleguides","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#styleguides","content":""},{"title":"Git Commits","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#git-commits","content":"When writing commits you should consider the following guidelines: Follow these git commit guidelinesAlways include a prefix in the commit message with the abbreviation of the project you're working on (api, bc, doc, UI, e2e-test, excel-export, email-service)When you're only changing the documentation you can include [ci skip] in the commit title "},{"title":"Git Branches","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#git-branches","content":"When creating a new branch, you should consider the following guidelines regarding branch names: Lead with the number of the issue you are working onAdd a short description of what the task is aboutUse hyphens as separators "},{"title":"Git Workflow","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#git-workflow","content":"To get an idea about the workflow used in our project you should read this how to / git. So when working on a feature branch make sure to: Checkout the master branch and pull the recent changesCreate a new feature branch respecting the guidelines mentioned aboveTry to keep the commits separate and respect the guidelines mentioned above. Don't squash the commits into a single one especially if you changed a lot of filesPush to the remote repository and open a pull request respecting the guidelines mentioned aboveMake sure the pipelines are passingWait for a review. If you need a specific team member to review the PR you can request a review from them and assign them to the PRWhen your feature is ready make sure you have the latest changes by running $ git pull --rebase origin master on your feature branch and push the changesMerge the pull request into master "},{"title":"Architecture Decisions","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#architecture-decisions","content":"When we make a significant decision in how to write code, or how to maintain the project and what we can or cannot support, we will document it using Architecture Decision Records (ADR). Take a look at the doc/architecture/decisions directory for existings ADRs. If you have a question around how we do things, check to see if it is documented there. If it is not documented there, please ask us - chances are you're not the only one wondering. Of course, also feel free to challenge the decisions by starting a discussion on GithubDiscussions or by opening a new github issue. "},{"title":"Source Layout","type":1,"pageTitle":"Contributing to TruBudget","url":"docs/developer/introduction#source-layout","content":"Best practices and layout is documented in README files next to the source files they describe. For example, take a look at api/src/ to get started. "},{"title":"Load and stress tests","type":0,"sectionRef":"#","url":"docs/developer/load-tests","content":"Load and stress tests TruBudget uses load and stress tests to ensure the system's stability. Some tests are triggered automatically after a major release, others run on each push to the remote repository or get triggered manually. The automated testing strategy allows to regularly check the system minimal requirements and adjust them as needed. Furthermore, developer get detailed information about the system allowing to search for flaws i.e. bottlenecks. There are three types of load/stress tests: Stress test: Classic stress to bring the core part of the system (API/Blockchain) to their limits. Although the system capacities are entirely used, the system should not crash nor be unusableSmoke Tests: Smoke test are regular load-test, configured for minimal load. They are used for sanity checks.Stability Test: The whole system and it's interconnecting services such as Email Service and Storage Service are tested. This test, in terms of requests and users per second, is set up similarly to the stress test. TruBudget uses k6 to define and run load and stability tests. Tests can be run both locally and using Docker. We highly recommend using docker since the provided script spins up a complete test setup including Grafana and Influx. However, if you choose to run the tests locally, k6 needs to be installed. An optional Grafana and Influx instance are not required, but recommended in order to analyze the data generated by the tests. note Per default, the test script will run a smoke test against your local TruBudget instance. However, if you want to test a remote instance, the target URL can be changed in api/loadtest/k6-tests/script.js by modifying the BASE_URL constant. The test type can be changed in the provided script (api/loadtest/runTests.sh) by modifying the --config parameter. Valid options are: smoke.config.json: runs a smoke-test (1 virtual user)load.config.json: runs a load-test (100 virtual user)stress.config.json: runs a stress-test (400 virtual user) Getting started Navigate to api/loadtestConfigure the test as described above and add execution rights to runTests.shRun ./runTests.sh Visualizing To visualize the generated data from the tests via Grafana: Open GrafanaNavigate to DashboardIn the left sidebar, click the + button &gt; ImportPaste the Dashboard ID: 2587 or 11837Click LoadSelect the Influx data-sourceClick Import tip Grafana has a bunch of pre-configured dashboards for k6 we recommend using one of the two predefined dashboards (2587 or 11837) mentioned above. However, if you want to browse the available dashboards, you can do it here. Also, feel free to contribute to the Grafana community by creating your own dashboard and publishing it to the Grafana Hub. Minimum requirements TruBudget can be deployed in different ways. To give your users the best experience, we tested TruBudget with different configurations. The minimum requirements aim to provide a working environment with 50 to 100 parallel user. The recommended environment is capable of handling 100 - 400 parallel user (using Kubernetes). If you plan to deploy TruBudget on a single VM with following services: Blockchain, API and Frontend, we recommend the following for minimum setup: | | Minimum | | ------- | ------- | | CPU† | 2 vCPU | | RAM | 8 GB | | Storage | 10 GB | If you plan to have more than 100 parallel users, we strongly recommend using Kubernetes. TruBudget load and stress tests are run against the minimum and recommend system requirements in a Kubernetes environment to ensure the correctness of the data below. Blockchain: Minimum\tRecommendedCPU†\t1 vCPU\t2 vCPU RAM\t4 GB\t8 GB Storage\t1 GB\t1* GB Frontend: Minimum\tRecommendedCPU†\t0.5 vCPU\t1 vCPU RAM\t1 GB\t2 GB Storage\t1 GB\t1 GB API: Minimum\tRecommendedCPU†\t0.5 vCPU\t1 vCPU RAM\t2 GB\t8 GB Storage\t1 GB\t1 GB Export-Service: Minimum\tRecommendedCPU†\t0.5 vCPU\t0.5 vCPU RAM\t1 GB\t1 GB Storage\t1 GB\t1 GB Email-Service: Minimum\tRecommendedCPU†\t0.5 vCPU\t0.5 vCPU RAM\t1 GB\t1 GB Storage\t1 GB\t1 GB Storage-Service: Minimum\tRecommendedCPU†\t1 vCPU\t2 vCPU RAM\t1 GB\t2 GB Storage\t1 GB\t50* GB note † Depending on your or your provider's infrastructure, the strength of one virtual CPU might vary. The above values are based on the Intel® Xeon® Platinum 8272CL processor (second generation Intel® Xeon® Scalable processors), Intel® Xeon® 8171M 2.1GHz (Skylake), Intel® Xeon® E5-2673 v4 2.3 GHz (Broadwell), or the Intel® Xeon® E5-2673 v3 2.4 GHz (Haswell) processors. * Assuming you are using off-chain-storage.","keywords":""},{"title":"Setup","type":0,"sectionRef":"#","url":"docs/developer/developer-setup","content":"","keywords":""},{"title":"Table of Contents","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#table-of-contents","content":"Developer Setup Table of Contents Software components Working on WindowsDocker/Docker-ComposeNode.js / npmTypescript Project Setup Clone RepositoryIDEChrome Developer ToolsGit-SecretsEnvironment variablesDocker Environment Development Setup Dockerized Application (recommended)TruBudget Services BlockchainAPIFrontendProvisioning (Optional)Excel-Export (Optional)Email-Notification (Optional)Storage-Service (Optional) Tests End-to-end TestsUnit Tests CI/CD Links "},{"title":"Software components","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#software-components","content":""},{"title":"Working on Windows","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#working-on-windows","content":"If you are using a Windows operating system, we suggest using the Windows Subsystem for Linux, for the installation please read this guide. Because our setup was tested on WSL 1 and not on WSL 2, we suggest using WSL 1. However, if you want to use WSL 2, you can try by following these steps. "},{"title":"Docker/Docker-Compose","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#dockerdocker-compose","content":"The easiest way to setup the application on your machine is via Docker and Docker-Compose. To install these components, please follow the official documentation: DockerDocker Compose "},{"title":"Node.js / npm","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#nodejs--npm","content":"Follow the official instructions on how to setup node.js/npm. "},{"title":"TypeScript","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#typescript","content":"If you are using a global installation of TypeScript, please make sure you have a version starting from 4.0.2 "},{"title":"Project Setup","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#project-setup","content":""},{"title":"Clone Repository","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#clone-repository","content":"Clone the repository from Github: SSH: Follow the instructions on how to setup your SSH-connection git clone https://github.com/openkfw/TruBudget.git Copy HTTPS: git clone https://github.com/openkfw/TruBudget.git Copy ### IDE For coding, we recommend the use of Visual Studio Code, which you can find here. To ensure that the code is formatted properly we recommend following extensions for VS Code: - aaron-bond.better-comments - CoenraadS.bracket-pair-colorizer - dbaeumer.vscode-eslint † - EditorConfig.EditorConfig - esbenp.prettier-vscode - pmneo.tsimporter - rbbit.typescript-hero - xabikos.JavaScriptSnippets - esbenp.prettier-vscode note † Have a look here to learn more about how to set up es-lint for validating TypeScript in VSCode "},{"title":"Chrome Developer Tools","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#chrome-developer-tools","content":"If you are testing and debugging in Google Chrome, we recommend the following extensions: React Developer Tools Redux Developer Tools "},{"title":"Git-Secrets","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#git-secrets","content":"awslabs/git-secrets is a tool to scan a repository for secrets, credentials or any unwanted text. We recommend to install git-secrets and setup git-hooks to prevent committing secrets. The setup-script(.githooks/setupGitSecrets.sh) edits your local git-config located in .git. Changes made by setupGitSecrets.sh: change hooks-path to .githooksadds git-secrets-patterns listed in .githooks/git-secrets-patterns How to install git-secrets?# Follow the instructions here or use homebrew brew install git-secrets Copy How to setup?# Setup git-secrets by execute the shell script in the .githooks folder cd .githooksbash setupGitSecrets.sh Copy "},{"title":"Environment variables","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#environment-variables","content":"All projects in TruBudget (blockchain, api, frontend, etc) have a docker-compose file that can be used to start the project with. In order to start the projects, some environment variables must be set. In order to make this easier, there are some files containing the environment variables called .env_example in each project directory. To use these environemnt variables, simply copy the .env.example file and rename it to .env. caution Do NOT use other additional ways to set environment variables like inline env-variables or env-variables defined by 'export'. Why? - Because these env-variables will overwrite each which makes it very hard to find mistakes. "},{"title":"Development Setup","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#development-setup","content":"If you want to start developing on Trubudget, you need to setup the application locally. This guide tells you how to start the blockchain, start the API, load up some test data and start the frontend. "},{"title":"Dockerized Application (recommended)","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#dockerized-application-recommended","content":"This is the fastest way you can run all services needed for development. Everything is started in one command: in root directory execute: bash scripts/development/start-dev.sh --slim or bash scripts/development/start-dev.sh --full This script sets the .env - file in the development directory automatically. No further steps needed. Following services are dockerized with hot-reloading: Blockchain (master node)API (master API)Provisioning (feeds application with dummy data)FrontendExcel exportEmail notificationEmail DatabaseStorage ServiceMinio Database (external document storage) If the script is started with --slim, only the Blockchain, API, Provisioning and Frontend will be started. For further details how to use the script, print out its help section with bash scripts/development/start-dev.sh --help. It takes some time to build and run at the first launch. After that, source codes of all services are live reloaded. That means any change in ./src folder is reflected in respective container automatically. The frontend should be availaible as usual at http://localhost:3000 Docker Compose ensures that services are communicating and have correct environment variables set. Docker Compose puts all services in the same network and exposes needed ports. You can inspect each container individually: docker logs --follow CONTAINER. Where CONTAINER represents name of the service that can be found in the .yml file. note Hot reloading with docker requires a lot of processing power (due to docker volumes). If you experience huge delays while hot-reloading, you should start the services you need by yourself without docker. "},{"title":"TruBudget Services","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#trubudget-services","content":"Blockchain# The blockchain works as data layer for the Trubudget application. We suggest reading the README.md file in the /blockchain to have a better idea on how the blockchain layer works in TruBudget. Also, take a look at the multichain website to see how the multichain works. We start by creating an instance of the blockchain. First, navigate to the /blockchain folder, install all the npm packages and then start the blockchain via a shellscript: Navigate to the ./blockchain folder and start your favourite shell. cd blockchain Copy Start docker if it is not running already Install node-modules npm install Copy Create a blockchain instance bash startDev.sh Copy Developing on Windows:# If you are developing on Windows, we recommend using the Git Bash to run the startDev.sh script. API# The API takes care of the communication between the blockchain and the frontend and basically serves as backend. The API is developed using Node.js, with Fastify, Axios, JoiThe proper setting of environment variables is important so the API can communicate with the blockchain correctly. Details regarding the environment variables can be found here. The API is structured into layers (application layer, service layer, domain layer) and each of these layers has its own language. There is a README file in each of the layers, where the structure of the API and the current layer is described in detail. You can start by checking out this link to get more details. To start the api open your favorite shell, navigate to your api folder and follow these instructions: cd ../api Copy Set environment variables Rename the .env_example file to .env and set following environment variables accordingly. ORGANIZATION=ACMECorpRPC_HOST=127.0.0.1RPC_PORT=8000PORT=8080ROOT_SECRET='root-secret'ORGANIZATION_VAULT_SECRET=&quot;secret&quot;RPC_PASSWORD=s750SiJnj50yIrmwxPnEdSzpfGlTAHzhaUwgqKeb0G1j Copy Install node-modules (Linux/Mac) Depending on your machine configuration, it might be necessary to install autoconf and automake brew install autoconfbrew install automake Copy Terminal Mac/Git Bash npm install Copy Start the api On Linux/Mac: npm run dev Copy On Windows: Unfortunately hot reloading using nodemon is currently not working properly on Windows. It's therefore recommended to open two open 2 separate terminal windows. Navigate to the api folder and set the environment variables as described above. Make sure that the above environment variables are set in both terminal windows. In the first terminal window run tsc --watch Copy In the second window run npm install -g nodemonnodemon dist Copy to start the api. The API-Documentation should then be available at http://localhost:8080/api/documentation/index.html Using Postman# One tool that can be used for REST calls is called Postman. There is a collection of API calls ready to be imported into Postman. Frontend# After initializing the blockchain and api, we can now start the frontend to visualize the data. For developing the frontend we use React, along with the Redux-Saga library and the Material-UI framework. You can check out the README.md for more details about the frontend. Navigate to the frontend folder: cd ../frontend Copy Set environment variables Rename the .env_example file to .env and set following environment variables accordingly. PORT=3000 Copy Additionally you can connect the frontend to the optional excel export service, by adding the environment variables mentioned in the excel-export section of the README.md Install node-modules npm install Copy Start the frontend npm start Copy The frontend should then be availaible at http://localhost:3000 caution If you change the port of the api you may have to consider to change the proxy port in the package.json accordingly. note You do not need to run every project separately if you are developing on a single one. Just do following: go to a desired folder (e.g. /api)copy .env.example file and rename it to .envrun bash startDev.sh in the folder to start dependent project(s) Provisioning (Optional)# This part will initiate the blockchain with test user and project data. The environment variables for this step differ slightly from the ones for the API, so please set them accordingly. You can skip this part if you don't want to have initial test data on your blockchain. Check out the README.md for more details. cd ../provisioning Copy Set environment variables Rename the .env_example file to .env and set following environment variables accordingly. API_PORT=8080ORGANIZATION=ACMECorpROOT_SECRET='root-secret' Copy Install node-modules npm install Copy Start the provisioning npm start Copy Excel-Export (Optional)# There is a service that exports TruBudget data into an Excel sheet. For exporting we use the npm package exceljs. The service is a node package and needs to be started separately. More details regarding the excel-export service can be found in the README.md. To start the service locally, follow these commands: cd ../excel-export-service Copy Set environment variables Rename the .env_example file to .env and set following environment variables accordingly. PROD_API_PORT=8080TEST_API_PORT=8080PROD_API_HOST=&quot;localhost&quot;TEST_API_HOST=&quot;localhost&quot;PORT=8888 Copy Install node-modules npm install Copy Start the service npm start Copy The service is then available either on the host and port set by the environment variable or localhost:8888 by default. note in order to access the excel export service from the UI, you should start the frontend with some additional environment variables as mentioned in the excel-export section of the frontend README.md file. note Another way to start the excel export service is in a docker container. Using the docker-compose file in the excel-export folder will build the whole application including api, blockchain, frontend and excel-export service at the same time. Email-Notification (Optional)# The email notification service is responsible for saving/deleting email adresses per Trubudget user in a connected database. These email addresses are used to send configurable notifications to a connected SMTP server. If you want to start this service or simply see more details regarding this feature you can check out the README.md file. Storage-Service (Optional)# The storage service is responsible for saving/accessing documents to Minio, an external storage server. More details and how to enable the storage service with an external storage can be found in README.md file. "},{"title":"Tests","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#tests","content":""},{"title":"End-to-end Tests","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#end-to-end-tests","content":"Before checking in, you should always run the end-to-end test which explores / tests the whole functionality of the application. For end-to-end testing we use the testing framework Cypress. If you want to start all e2e-tests to check if your changes are not breaking any stuff we recommend the Docker Compose Setup. More details regarding the environment variables can be found in the README file. Prerequisits# Before running the tests you should make sure that the application is started (including the excel export service if needed) and that you first run the provisioning. In order for the backup_spec tests to pass you should also start the project with the same configurations (Organization and RPC Password). When running the e2e-tests locally, you have to make sure that the password used for authentication as root user in the test matches the one used in the project that is currently running, otherwise some tests can fail because of an &quot;Authentication failed&quot; error. Setup# note If you are using WSL on Windows check out this setup to run cypress in WSL. To setup a new TruBudget instance with Docker-Compose, run following command (recommended): bash scripts/development/start-dev.sh --slim Copy If you do not want to use Docker, you can setup all service by yourself with npm start. cd e2e-test Copy In the e2e-test folder you can run the following commands: Before you run cypress, you need to specify the environment variables (such as Organization, URLs of fronted, api, excel export, email service) in the .env* file. If you have not .env* file, create one and copy the content from /e2e-test/.env_example* to /e2e-test/.env*. For more information see Environment variables npm run cypress or npm run e2etest Copy or through the Cypress frontend under settings. For further information see the README.md of /e2e-test note The .env file is needed. "},{"title":"Unit Tests","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#unit-tests","content":"Before checking in, you should always create unit tests for the implemented part. For unit testing we use the testing framework Mocha with Chai as assertion library. Following command executes all spec.js files in the src folder: cd apinpm run test Copy Following command executes all spec.js files in a specific folder (e.g. project) located in the src folder: cd apinpm run test:here &lt;folderName&gt; Copy Following command executes a specific test group (e.g. &quot;Updating a project&quot;) defined within spec.js files in a specific folder (e.g. project) located in the src folder. The test group is defined with the describe function of mocha. cd apinpm run test:here &lt;folderName&gt; &lt;describeString&gt; Copy "},{"title":"CI/CD","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#cicd","content":"The CI/CD is described here "},{"title":"Links","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#links","content":"Here you can find a summary of all the technologies used in TruBudget with links to their websites and documentation "},{"title":"Blockchain","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#blockchain-1","content":"README.mdMultichainMultichain-CLI tutorial "},{"title":"API","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#api-1","content":"README.mdNode.jsFastifyAxiosJoi "},{"title":"Frontend","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#frontend-1","content":"README.mdReactRedux-SagaMaterial-UI "},{"title":"Provisioning","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#provisioning","content":"README.md "},{"title":"Excel-Export","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#excel-export","content":"README.mdExceljs "},{"title":"E2E-Tests","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#e2e-tests","content":"README.mdCypress "},{"title":"Unit-Tests","type":1,"pageTitle":"Setup","url":"docs/developer/developer-setup#unit-tests-1","content":"MochaChai "},{"title":"Logging","type":0,"sectionRef":"#","url":"docs/developer/logging","content":"","keywords":""},{"title":"API Log","type":1,"pageTitle":"Logging","url":"docs/developer/logging#api-log","content":"The API is the central part of the TruBudget application. It handles the requests from the frontend and manages the data that is written to the blockchain. Therefore logging is a cruicial part of the API's operation, so that the administrator is informed of where and when errors occur. TruBudget can be installed in 3 possible flavors: Bare Metal - All componends (Node.js, Multichain, nginx, etc.) are installed directly onto the machine that will be running the applicationDocker-Compose - All parts of the application are available as docker images, so they are pulled from a registry and started by docker on the host machineKubernetes - The containers with the different parts of the application are managed and orchestrated by Kubernetes The API logs are printed to the standard output (STDOUT and STDERR) by default. This way the application does not need to worry about file paths, log rotation and other operations topics. We have compiled a list of recomended practices for handling the logs for each installation type. "},{"title":"Bare metal","type":1,"pageTitle":"Logging","url":"docs/developer/logging#bare-metal","content":"As stated above, the API logs are printed to STDOUT/STDERR, which means that they are just displayed to the console. We therefore need an application that can take care of the node process and re-route the logs for us. Luckily, there are several applications that are capable of doing exactly that. One of them is PM2, which we will describe here shortly. PM2 is an application that handles node processes for you and restarts it after a crash. PM2 can be installed via the following command npm install -g pm2 Copy It offers a wide range of plugins called &quot;Modules&quot; that can be installed via PM2 directly. One of these modules is called &quot;pm2-logrotate&quot; which can be used to rotate logs (e.g. split them into chunks of certain size or create separate files for each day) and the command to install it is simply pm2 install pm2-logrotate Copy After setting up pm2-logrotate (if needed) you can run the api with pm2 cd apipm2 start dist/index.js Copy This is just an example. Please refer to the official documentation for more information. "},{"title":"Docker-Compose","type":1,"pageTitle":"Logging","url":"docs/developer/logging#docker-compose","content":"When choosing the Docker-Compose setup, all messages that are printed to STDOUT/STDERR are available via the docker logs command. On UNIX systems, the logs are available on /var/lib/docker/containers/[container-id]/[container-id]-json.log and can be processed with applications like Logrotate. Another possibility is to use the EFK stack which will be described below. "},{"title":"Kubernetes","type":1,"pageTitle":"Logging","url":"docs/developer/logging#kubernetes","content":"When operating the application via Kubernetes it is recommended to use the EFK stack, which will be described in more detail below. "},{"title":"The EFK stack","type":1,"pageTitle":"Logging","url":"docs/developer/logging#the-efk-stack","content":"The EFK stack consists of the following components: Elasticsearch - A backend for indexing and persisting dataFluentd/Fluentbit - An aggregator for log filesKibana - A frontend to visualize logs and work with them The EFK stack is a powerful set of software that enables advanced administration of log information. The logs are aggregated from all sources via Fluentd or Fluent Bit, sent to Elasticsearch and can then be viewed in Kibana. Fluentd and Fluent Bit are similar applications that perform similar tasks, but Fluentd is more versatile and heavyweight whereas Fluent Bit is lightweight and not as rich in functionalities. "},{"title":"EFK & Docker-Compose","type":1,"pageTitle":"Logging","url":"docs/developer/logging#efk--docker-compose","content":"In the Docker-Compose setup, we have mainly two different options of getting the logs of the containers: Use the &quot;Tail&quot; input plugin and select the path of the docker logs as inputUse the &quot;Fluentd&quot; log plugin that is built into Docker that automatically posts the log entries to the TCP port 24224 and then use the input plugin &quot;Forward&quot; to connect to the port 24224 and receive the log messages. Elasticsearch and Kibana can then be installed in Docker containers or locally. "},{"title":"EFK and Kubernetes","type":1,"pageTitle":"Logging","url":"docs/developer/logging#efk-and-kubernetes","content":"The Helm chart for Kubernetes can be configured such that a Fluent Bit pod is created on every node (see the reference architecture). The Fluent Bit pod then gathers all logs from the other pods on the node, adds some Kubernetes meta data (like pod names, cluster name, etc.) and sends it to a defined destination. In the reference architecture this destination is Fluentd, but if no further processing is required, the log data can be sent to Elasticsearch directly. "},{"title":"Logging Guidelines and information","type":1,"pageTitle":"Logging","url":"docs/developer/logging#logging-guidelines-and-information","content":"This section contains guidelines and standards regarding logging and should be expanded as the application matures. "},{"title":"Logger - Pino","type":1,"pageTitle":"Logging","url":"docs/developer/logging#logger---pino","content":"The logger used in the application is called &quot;Pino&quot; and you can find the documentation here. Why was Pino used instead of Winston? The reason is that Pino is compatible with Fastify, whereas Winston is not (at least not out of the box). "},{"title":"Logging - format","type":1,"pageTitle":"Logging","url":"docs/developer/logging#logging---format","content":"Pino supports several log levels (from trace to fatal). To make sure that the relevant information is in place, each log entry should include an object containing meta data if possible. Error# The call of the &quot;error&quot; level should always contain data of the situation as an &quot;err&quot; object. Example: logger.error({ err }, &quot;Stream not found.&quot;); Copy where err is the object containing information on the root cause of the error. "},{"title":"Environment variables","type":1,"pageTitle":"Logging","url":"docs/developer/logging#environment-variables","content":"There are two settings of the Pino logger that are set via environment variables. Set PRETTY_PRINT to &quot;true&quot; to enable pretty printing Set the log level via LOG_LEVEL. This will setting will be used for every service by default. The possible values are: &quot;trace&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot; and &quot;fatal&quot;. The developer and operation startup scripts control the log level for each service specifically (see .env_example files in scripts folder). Following Variables can be modified there: Set the log level via API_LOG_LEVEL. Controls Log Level for API.Set the log level via BLOCKCHAIN_LOG_LEVEL. Controls Log Level for the BlockchainSet the log level via EXCEL_LOG_LEVEL. Controls Log Level for Excel ServiceSet the log level via EMAIL_LOG_LEVEL. Controls Log Level for Email ServiceSet the log level via PROVISIONING_LOG_LEVEL. Controls Log Level for ProvisioningSet the log level via STORAGE_LOG_LEVEL. Controls Log Level for Storage Service "},{"title":"Frontend Logging","type":1,"pageTitle":"Logging","url":"docs/developer/logging#frontend-logging","content":"TruBudget offers the possibility to log frontend events such as errors or crashes. To collect and store this data, the TruBudget logging-service must be enabled. To enable the TruBudget logging-service, the parameter --with-frotnend-logging must be passed when deploying or when starting TruBudget in development mode with the provided start script. Make sure all env variables are set correctly as defined in the environment description. "},{"title":"Environment Variables","type":0,"sectionRef":"#","url":"docs/enviroment-variables","content":"Environment Variables In the following you can find all the environment variables used in the TruBudget project. Use this list as reference for development and deployment. Project\tShortcutFrontend\tui API\tapi Blockchain\tbc Provisioning\tprov Docker-compose\tdcEnv Variable\tRequired\tDefault Value\tUsed by\tDescriptionORGANIZATION\tyes\t-\tbc/api\tIn the blockchain network, each node is represented by its organization name. This environment variable sets this organization name. It is used to create the organization stream on the blockchain and is also displayed in the frontend's top right corner. ORGANIZATION_VAULT_SECRET\tyes\t-\tapi\tThis is the key to en-/decrypt user data of an organization. If you want to add a new node for your organization, you want users to be able to log in on either node. Make sure that the api connected to the new node has the same organization vault secret. Caution: If you want to run TruBudget in production,make sure NOT to use the default value from the .env_example file! API_HOST\tno bc/prov\tThe IP address of one api which is connected to the node you want to connect to (The IP addresses are usually the same as for the P2P host address). API_PORT\tno\t8080\tbc/prov\tThe port used to connect to the api. JWT_SECRET\tno\t[random]\tapi/bc\tA string that is used to sign JWT which are created by the authenticate endpoint of the api P2P_HOST\tno bc\tThe IP address of the blockchain node you want to connect to. P2P_PORT\tno\t7447\tbc\tThe port on which the node you want to connect to has exposed the blockchain. PORT\tno\t8080\tapi\tThe port used to expose the API for your installation. Example: If you run TruBudget locally and set API_PORT to 8080, you can reach the API via localhost:8080/api. ROOT_SECRET\tno\t[random]\tapi\tThe root secret is the password for the root user. If you start with an empty blockchain, the root user is needed to add other users, approve new nodes,.. If you don't set a value via the environment variable, the API generates one randomly and prints it to the console Caution: If you want to run TruBudget in production, make sure to set a secure root secret. RPC_PASSWORD\tno\t[hardcoded]\tapi/bc\tPassword used by the API to connect to the blockchain. The password is set by the origin node upon start. Every slave node needs to use the same RPC password in order to be able to connect to the blockchain. Hint: Although the RPC_PASSWORD is not required it is highly recommended to set an own secure one RPC_PORT\tno\t8000\tapi/bc\tThe port used to expose the multichain daemon of your Trubudget blockchain installation(bc). The port used to connect to the multichain daemon(api). This will be used internally for the communication between the API and the multichain daemon. RPC_USER\tno\tmultichainrpc\tapi/bc\tThe user used to connect to the multichain daemon. EXTERNAL_IP\tno bc\tThe IP address with which the current node can be reached. Example: If you have a VM running on 52.52.52.52 and you want to start a slave node from this VM to connect to a master running on 53.53.53.53, you set the EXTERNAL_IP to 52.52.52.52 on this node. ACCESS_CONTROL_ALLOW_ORIGIN\tno\t&quot;*&quot;\tbc/api/excel-export/storage-service\tSince the services use CORS, the domain by which it can be called needs to be set. Setting this value to &quot;*&quot; means that it can be called from any domain. Read more about this topic here. LOG_LEVEL\tno\tINFO\tapi/bc\tSets the lowest level to the pino logger that is printed to STDOUT with varying levels ranging from trace to fatal. MULTICHAIN_DIR\tno\t/root\tbc\tThe path to the multichain folder where the blockchain data is persisted. For installations via docker-compose, this refers to the path within the docker container of the blockchain. For bare metal installations, this refers to the path on the machine the blockchain is running on. PRETTY_PRINT\tno\ttrue\tapi/bc\tDecides whether the logs printed by the API are pretty printed or not. Pretty printed logs are easier to read while non-pretty printed logs are easier to store and use e.g. in the ELK (Elasticsearch-Logstash-Kabana) stack. SWAGGER_BASEPATH deprecated\tno\t/\tapi\tThis variable was used to choose which environment (prod or test) is used for testing the requests. The variable is deprecated now, as the Swagger documentation can be used for the prod and test environment separately. TAG\tno\tmaster\tdc\tThe tag defines the version of the image that is pulled from the docker hub. NODE_ENV\tno ui/api\tIf set to development search Trubudget's external services on localhost, api will allow any string as password. If set to production disable Redux devtools extension. REACT_APP_VERSION\tno ui\tInjected version via $npm_package_version in.env file to ensure the version is shown in the frontend INLINE_RUNTIME_CHUNK\tno\tfalse\tfrontend\tScripts that are injected by React will not be injected inline but as script with src=&quot;...&quot;. Important for being able to enforce a stricter Content Security Polify Kubernetes# Env Variable\tRequired\tDefault Value\tUsed by\tDescriptionEXPOSE_MC\tno\tfalse\tbc\tIf set to true Trubudget tries to expose it's multichain via kubernetes' ingress. First a kubernetes config file is searched in /.kube/config. If not found and the MC is deployed in a cluster, it is searching for the service account to get the information. After configuration the externalip arg is set to the ip of the service' ingress of the configured clusterSERVICE_NAME and NAMESPACE are required to access the ingress of the service. SERVICE_NAME\tno bc\tThis variable is only required if EXPOSE_MC is set to true. It defines which service the kubernetes client should search for in the configured kubernetes cluster NAMESPACE\tno bc\tThis variable is only required if EXPOSE_MC is set to true. It defines in which namespace the kubernetes client should search for the given service","keywords":""},{"title":"Issues during Developer Setup","type":0,"sectionRef":"#","url":"docs/known-issues/dev","content":"","keywords":""},{"title":"Docker disables wifi network adapter","type":1,"pageTitle":"Issues during Developer Setup","url":"docs/known-issues/dev#docker-disables-wifi-network-adapter","content":"If you install Docker on Windows while using Pulse Secure it's possible that you will experience network issues. The solution is to disable pulse secure to prevent it from disabling your wifi adapter. You can find a detailed solution here: Solution for this issue. "},{"title":"Port 8000 is already in use","type":1,"pageTitle":"Issues during Developer Setup","url":"docs/known-issues/dev#port-8000-is-already-in-use","content":"This means that another process is blocking the port that you want to use for communication. To solve this, you need to find this process and stop it. You can find the process by running netsh http show servicestate Copy in the Windows Command Prompt (or PowerShell) and looking for the process that is running on port 80 and note down the PID of the proccess. In the task manager, find the process with the PID and end it if it's not needed by the system. You can find a detailed solution on Stackoverflow. "},{"title":"Port 80 used by PID 4","type":1,"pageTitle":"Issues during Developer Setup","url":"docs/known-issues/dev#port-80-used-by-pid-4","content":"This means that there is a system process blocking port 80. If you want to use TruBudget in production, you should find and disable that process. If you want to test TruBudget on your machine, an easy way to fix it is to set the exposed ports in the Yaml file to a different one. Locate the file scripts/development/docker-compose.yml and change the following part frontend: build: context: ../../frontend ports: - &quot;80:80&quot; # Mapping the nginx port Copy to frontend: build: context: ../../frontend ports: - &quot;90:80&quot; # Mapping the nginx port Copy Then you can access the frontend via localhost:90 after start. "},{"title":"Known Issues & Troubleshooting","type":0,"sectionRef":"#","url":"docs/known-issues/intro","content":"","keywords":""},{"title":"Github Discussions","type":1,"pageTitle":"Known Issues & Troubleshooting","url":"docs/known-issues/intro#github-discussions","content":"If you experience any issues that are not described here, please contact us via Github Discussions. "},{"title":"Environment Variables","type":0,"sectionRef":"#","url":"docs/environment-variables","content":"","keywords":""},{"title":"Kubernetes","type":1,"pageTitle":"Environment Variables","url":"docs/environment-variables#kubernetes","content":"Env Variable\tRequired\tDefault Value\tUsed by\tDescriptionEXPOSE_MC\tno\tfalse\tbc\tIf set to true Trubudget tries to expose it's multichain via kubernetes' ingress. First a kubernetes config file is searched in /.kube/config. If not found and the MC is deployed in a cluster, it is searching for the service account to get the information. After configuration the externalip arg is set to the ip of the service' ingress of the configured clusterSERVICE_NAME and NAMESPACE are required to access the ingress of the service. SERVICE_NAME\tno bc\tThis variable is only required if EXPOSE_MC is set to true. It defines which service the kubernetes client should search for in the configured kubernetes cluster NAMESPACE\tno bc\tThis variable is only required if EXPOSE_MC is set to true. It defines in which namespace the kubernetes client should search for the given service "},{"title":"Errors during Local Installation","type":0,"sectionRef":"#","url":"docs/known-issues/local","content":"","keywords":""},{"title":"API cannot connect to chain","type":1,"pageTitle":"Errors during Local Installation","url":"docs/known-issues/local#api-cannot-connect-to-chain","content":"If there is an error upon starting the API with the message &quot;readiness: MultiChain connection failed&quot;, it's most likely because the blockchain was not started properly. If you see the following error message: [2018-10-03T12:13:23.950Z] INFO (TruBudget/16981 on servername): Connecting to MultiChain node protocol: &quot;http&quot; host: &quot;127.0.0.1&quot; port: 8000 username: &quot;multichainrpc&quot; password: &quot;password&quot;Register fastify endpointschema id ignored er58c69eg298c87e3899119e025eff1fschema id ignored fe9c2b24ade9a92360b3a898665678ac[2018-10-03T12:13:24.318Z] INFO (TruBudget/16981 servername): server is listening on 8080[2018-10-03T12:13:24.585Z] WARN (TruBudget/16981 servername): &quot;readiness: MultiChain connection failed&quot;[2018-10-03T12:13:24.586Z] ERROR (TruBudget/16981 servername): MultiChain connection/permissions not ready yet Copy then locate the running instances of the blockchain ps aux | grep multichain Copy which will produce an output similar to this: root 17272 0.1 0.7 1042828 59520 ? SLl 12:17 0:11 multichaind -txindex TrubudgetChain -port=7447 -autosubscribe=streams Copy Then shutdown the process with the kill command with the first number after &quot;root&quot; (in this case 17272): kill 17272 Copy After this, start the blockchain again using the steps described in the guide (including the exports of the variables!). "},{"title":"Cannot start nginx","type":1,"pageTitle":"Errors during Local Installation","url":"docs/known-issues/local#cannot-start-nginx","content":"If you get the following error nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)nginx: [emerg] still could not bind() Copy it means that there is already an instance of nginx running and using the port 80. To stop the other process (if it's not needed), list the nginx processes ps aux | grep nginx Copy which will produce an output similar to this one: root 23979 0.0 0.1 116656 8660 pts/1 S 14:04 0:00 nginx: master process nginx -g daemon off;www-data 23981 0.0 0.0 116984 2980 pts/1 S 14:04 0:00 nginx: worker processwww-data 23982 0.0 0.0 116984 3020 pts/1 S 14:04 0:00 nginx: worker process Copy Only the root process needs to be shut down. This is done via nginx -s stop Copy "},{"title":"Standard Welcome Page of nginx showing","type":1,"pageTitle":"Errors during Local Installation","url":"docs/known-issues/local#standard-welcome-page-of-nginx-showing","content":"If you enter the IP address of your machine and you are presented with the standard welcome screen of nginx instead of the Trubudget app, you need to modifiy the /etc/nginx/nginx.conf to disable the configuration of &quot;sites-enabled&quot;. First, login as root and open the nginx.conf file with your editor of choice: sudo sunano /etc/nginx/nginx.conf Copy Then locate the line include /etc/nginx/sites-enabled/* and disable it by putting a pound sybol at the beginning of the line: #include /etc/nginx/sites-enabled/*;include /etc/nginx/conf.d/*.conf; Copy "},{"title":"Node JS Permission Issue","type":1,"pageTitle":"Errors during Local Installation","url":"docs/known-issues/local#node-js-permission-issue","content":"If you receive an error running npm install, that looks like the following: 726 verbose stack Error: sodium-native@2.1.6 install: `node-gyp-build &quot;node preinstall.js&quot; &quot;node postinstall.js&quot;`726 verbose stack spawn ENOENT726 verbose stack at ChildProcess.&lt;anonymous&gt; (/usr/lib/node_modules/npm/node_modules/npm-lifecycle/lib/spawn.js:48:18)726 verbose stack at ChildProcess.emit (events.js:180:13)726 verbose stack at maybeClose (internal/child_process.js:936:16)726 verbose stack at Process.ChildProcess._handle.onexit (internal/child_process.js:220:5)727 verbose pkgid sodium-native@2.1.6728 verbose cwd /root/trubudget/api729 verbose Linux 4.15.0-1025-azure730 verbose argv &quot;/usr/bin/node&quot; &quot;/usr/bin/npm&quot; &quot;install&quot;731 verbose node v9.11.2732 verbose npm v5.6.0733 error file sh734 error code ELIFECYCLE735 error errno ENOENT736 error syscall spawn737 error sodium-native@2.1.6 install: `node-gyp-build &quot;node preinstall.js&quot; &quot;node postinstall.js&quot;`737 error spawn ENOENT738 error Failed at the sodium-native@2.1.6 install script.738 error This is probably not a problem with npm. There is likely additional logging output above.739 verbose exit [ 1, true ] Copy Check the global node_modules (usr/lib/node_modules/) permissions. "},{"title":"Unable to lock the administration direcectory","type":1,"pageTitle":"Errors during Local Installation","url":"docs/known-issues/local#unable-to-lock-the-administration-direcectory","content":"If you see the following error message E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it? Copy you need to delete the lock files (as root): rm /var/lib/apt/lists/lockrm /var/cache/apt/archives/lockrm /var/lib/dpkg/lock Copy "},{"title":"Securing communication between nodes","type":0,"sectionRef":"#","url":"docs/operation-administration/encryption","content":"","keywords":""},{"title":"SOCKS 5 reverse proxy","type":1,"pageTitle":"Securing communication between nodes","url":"docs/operation-administration/encryption#socks-5-reverse-proxy","content":"MultiChain daemon has an option to communicate with nodes via a SOCKS 5 proxy. The usage for this is: multichaind [chain]@[ip-address]:[port] - daemon -proxy:[user]:[pass]@[myproxy]:[myproxyport] Copy While the SOCKS 5 protocol itself does not provide encryption, the basic idea would be to build a reverse proxy where the connections facing public networks are encrypted using TLS. This can be done by creating a TCP socket which the MultiChain instances uses as proxy destination. The incoming traffic is piped through a TLS socket to the destination proxy server. The destination Proxy server accepts the connection via a TLS socket and pipe the data to the MultiChain instance using a TCP socket. A corresponding question in the MultiChain community can be found here.  | Master Node &lt; --- &gt; Proxy 1 | &lt; --Public Network (via SSL) --&gt; | Proxy 2 &lt; --- &gt; Slave Node | | Container 1 | | Container 2 | Copy "},{"title":"Altering Multichain","type":1,"pageTitle":"Securing communication between nodes","url":"docs/operation-administration/encryption#altering-multichain","content":"As MultiChain is an open source project, the source code can be modified to support TLS connections between the sockets processing the SOCKS 5 protocol. This would come with additional maintaining effort. "},{"title":"Connect to an Existing Network on Bare Metal","type":0,"sectionRef":"#","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal","content":"","keywords":""},{"title":"Table of Contents","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#table-of-contents","content":"Connect to an Existing Network Directly from Machine Table of ContentsGet the repositoryBlockchainAPI Log-Rotation Excel Export Set Environment VariablesInstall Node ModulesStart the Service Frontend "},{"title":"Get the repository","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#get-the-repository","content":"Clone the Github repository of the components onto the designated machines. Clone the repository: git clone https://github.com/openkfw/TruBudget.gitcd TruBudget Copy info If you work with an existing checkout, make sure you have the latest changes: git pull Copy "},{"title":"Blockchain","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#blockchain","content":"To connect to an already existing Blockchain network adapt and set the following environment parameters: export ORGANIZATION=&quot;YourOrga&quot;;export RPC_PORT=8000;export RPC_USER=&quot;multichainrpc&quot;;export RPC_PASSWORD=&quot;password&quot;;export RPC_ALLOW_IP=&quot;0.0.0.0/0&quot;;export MULTICHAIN_DIR=&quot;/root&quot;export EXTERNAL_IP = [external IP here];export P2P_PROD_HOST = [IP of prod instance of seed node];export P2P_PROD_PORT = [MultiChain port of prod instance of seed node];export P2P_TEST_HOST = [IP of test instance of seed node];export P2P_TEST_PORT = [MultiChain port of test instance of seed node];export API_PROD_HOST=[IP of seed API (prod)];export API_PROD_PORT=[port of seed API (prod)];export API_TEST_HOST=[IP of seed API (test)];export API_TEST_PORT=[port of seed API (test)]; Copy Navigate into the blockchain directory and install the node packages defined in the package.json and start the Blockchain with: cd blockchain/npm installnpm start &gt; startup.log 2&gt;&amp;1 &amp; Copy Since you are trying to connect to an already existing Blockchain network the node has to be approved by a master node. Before the approval, the startup.log should look similar to: TrubudgetChain http 192.168.96.3 8080 7447 TrubudgetChain@192.168.96.3:7447&gt;&gt;&gt; Args: -txindex,-port=7447,-autosubscribe=streams,TrubudgetChain@192.168.96.3:7447,,&gt;&gt; [MULTICHAIN_DIR]/.multichain/TrubudgetChain/multichain.conf rpcport=8000rpcuser=multichainrpcrpcpassword=passwordrpcallowip=0.0.0.0/0multichaind | Retrieving blockchain parameters from the seed node 192.168.96.3:7447 ...multichaind | Blockchain successfully initialized.multichaind | Please ask blockchain admin or user having activate permission to let you connect and/or transact:multichaind | multichain-cli TrubudgetChain grant [redacted] connectmultichaind | multichain-cli TrubudgetChain grant [redacted] connect,send,receivemultichaind |MultiChain 2.0 alpha 2 Daemon (latest protocol 20002)&gt;&gt;&gt; Multichain stopped. Retry in 10 Seconds... Copy After the node was approved by the master node, the startup.log should update to this: &gt;&gt; MULTICHAIN_DIR/.multichain/multichain.conf rpcport=8000rpcuser=multichainrpcrpcpassword=passwordrpcallowip=0.0.0.0/0 TrubudgetChain http 192.168.96.3 8080 7447 TrubudgetChain@192.168.96.3:7447&gt;&gt;&gt; Args: -txindex,-port=7447,-autosubscribe=streams,TrubudgetChain@192.168.96.3:7447,,&gt;&gt; MULTICHAIN_DIR/.multichain/TrubudgetChain/multichain.conf rpcport=8000rpcuser=multichainrpcrpcpassword=passwordrpcallowip=0.0.0.0/0 multichaind | Retrieving blockchain parameters from the seed node 192.168.96.3:7447 ...multichaind | Other nodes can connect to this node using:multichaind TrubudgetChain@172.17.0.3:7447This host has multiple IP addresses, so from some networks:multichaind TrubudgetChain@192.168.96.2:7447multichaind | Node ready. Copy "},{"title":"API","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#api","content":"If you provisioned a Blockchain of the type &quot;Connect to an existing network&quot; set the following environment parameters: export ORGANIZATION=&quot;YourOrga&quot; (same as for the Blockchain configuration)export RPC_HOST=localhostexport RPC_PORT=8000export ORGANIZATION_VAULT_SECRET=secretexport ROOT_SECRET=root-secretexport RPC_PASSWORD=&quot;password&quot; Copy Once Node.js is installed navigate into the api directory and run the following commands to start the API: cd ../apinpm installnpm run buildnode dist &gt; api.log 2&gt;&amp;1 &amp; Copy You can then check the api log via cat api.log Copy The api.log should look similar to: (the log includes entries from before and after the node is approved by the master node, that's why you see errors here): [2018-11-16T15:01:04.019Z] ERROR (TruBudget/5632 on d467a0e3104f): MultiChain connection/permissions not ready yet[2018-11-16T15:01:09.034Z] INFO (TruBudget/5632 on d467a0e3104f): MultiChain connection established[2018-11-16T15:01:09.040Z] ERROR (TruBudget/5632 on d467a0e3104f): failed to create organization stream[2018-11-16T15:01:14.046Z] ERROR (TruBudget/5632 on d467a0e3104f): failed to create organization stream[2018-11-16T15:01:19.054Z] DEBUG (TruBudget/5632 on d467a0e3104f): Created stream org:YourOrga with options {&quot;kind&quot;:&quot;organization&quot;,&quot;name&quot;:&quot;org:YourOrga&quot;}[2018-11-16T15:01:19.061Z] TRACE (TruBudget/5632 on d467a0e3104f): addressFromWallet: &quot;[redacted]&quot; privkey: &quot;[redacted]&quot;[2018-11-16T15:01:19.066Z] TRACE (TruBudget/5632 on d467a0e3104f): wrote hex string to chain: 282 bytes[2018-11-16T15:01:19.066Z] INFO (TruBudget/5632 on d467a0e3104f): Initializing organization address to local wallet address: [redacted][2018-11-16T15:01:19.067Z] DEBUG (TruBudget/5632 on d467a0e3104f): Publishing wallet address to org:YourOrga/&quot;address&quot;[2018-11-16T15:01:19.069Z] INFO (TruBudget/5632 on d467a0e3104f): organization address: [redacted][2018-11-16T15:01:19.072Z] DEBUG (TruBudget/5632 on d467a0e3104f): Created stream users:YourOrga with options {&quot;kind&quot;:&quot;users&quot;,&quot;name&quot;:&quot;users:YourOrga&quot;}[2018-11-16T15:01:19.073Z] INFO (TruBudget/5632 on d467a0e3104f): organization stream present[2018-11-16T15:01:19.076Z] INFO (TruBudget/5632 on d467a0e3104f): node registered in nodes stream Copy Log-Rotation# As stated above, the API logs are printed to api.log. For operational purposes it is useful to have an application that manages the process and takes care of log rotation (i.e. breaking the logs into smaller chunks). Luckily, there are several applications that are capable of doing exactly that. One of them is PM2, which we will describe here shortly. PM2 is an application that handles node processes for you and restarts it after a crash. PM2 can be installed via the following command npm install -g pm2 Copy It offers a wide range of plugins called &quot;Modules&quot; that can be installed via PM2 directly. One of these modules is called &quot;pm2-logrotate&quot; which can be used to rotate logs (e.g. split them into chunks of certain size or create separate files for each day) and the command to install it is simply pm2 install pm2-logrotate Copy You can set up pm2-logrotate (if needed) with the following command pm2 set pm2-logrotate:&lt;param&gt; &lt;value&gt; Copy e.g: pm2 set pm2-logrotate:max_size 1K (sets max. file size to 1KB)pm2 set pm2-logrotate:compress true (compresses logs when rotated)pm2 set pm2-logrotate:rotateInterval '*/1 * * * *' (force rotate every minute, syntax similar to CRON) Copy cd apipm2 start dist/index.js Copy This is just an example. Please refer to the official documentation for more information. "},{"title":"Excel Export","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#excel-export","content":"To enable the export of TruBudget data into Excel files, a separate service needs to be started. To start that service, first change the directory to the excel-export-service folder: cd ../excel-export-service Copy "},{"title":"Set Environment Variables","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#set-environment-variables","content":"The following environment variables need to be set: Terminal Mac/Git Bash export PROD_API_HOST=127.0.0.1export TEST_API_HOST=127.0.0.1export PROD_API_PORT=8080export TEST_API_PORT=8081export PORT=8888export ACCESS_CONTROL_ALLOW_ORIGIN=&quot;*&quot; Copy Terminal Windows/Command Shell SET PROD_API_HOST=127.0.0.1SET TEST_API_HOST=127.0.0.1SET PROD_API_PORT=8080SET TEST_API_PORT=8081SET PORT=8888SET ACCESS_CONTROL_ALLOW_ORIGIN=&quot;*&quot; Copy "},{"title":"Install Node Modules","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#install-node-modules","content":"Install the node modules via npm install Copy "},{"title":"Start the Service","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#start-the-service","content":"npm start Copy "},{"title":"Frontend","type":1,"pageTitle":"Connect to an Existing Network on Bare Metal","url":"docs/operation-administration/installation/connect-to-existing-node/bare-metal#frontend","content":"The first step to deploy the frontend is to adapt and set the environment parameters. If you plan to deploy only one API set PROD and TEST parameters, so that it points to the single API. cd ../frontend export PROD_API_HOST=127.0.0.1export PROD_API_PORT=8080export TEST_API_HOST=127.0.0.1export TEST_API_PORT=8080 Copy Navigate into the frontend directory and copy the nginx.conf into the designated nginx directory with: cp nginx.conf /etc/nginx/conf.d/default.conf Copy Install the node packages and start the production build: npm installnpm run build Copy Once the build was successful copy the build sources into the html directory of nginx: cp -R build/* /usr/share/nginx/html Copy The final step is to modify the nginx configuration, so that nginx points to the previous configured API instances. danger Caution: It's possible that nginx was automatically started after installation. To check if this is the case run ps aux | grep nginx Copy If you see matching entries, simply run nginx -s stop Copy to stop all running processes. To start the frontend, run the following command: /bin/bash configureServer.sh Copy As soon as the step above is done, the frontend should be available on port 80. Make sure that port 80 is exposed and not blocked by any firewall. "},{"title":"Connect to an Existing Network using Docker","type":0,"sectionRef":"#","url":"docs/operation-administration/installation/connect-to-existing-node/connect-docker-compose","content":"","keywords":""},{"title":"Table of Contents","type":1,"pageTitle":"Connect to an Existing Network using Docker","url":"docs/operation-administration/installation/connect-to-existing-node/connect-docker-compose#table-of-contents","content":"Connect to an existing Blockchain network Table of ContentsPrerequisites Docker &amp; Docker ComposePorts Table of ContentsPrerequisites Docker &amp; Docker ComposePorts Connect to an existing Blockchain network "},{"title":"Prerequisites","type":1,"pageTitle":"Connect to an Existing Network using Docker","url":"docs/operation-administration/installation/connect-to-existing-node/connect-docker-compose#prerequisites","content":""},{"title":"Docker & Docker Compose","type":1,"pageTitle":"Connect to an Existing Network using Docker","url":"docs/operation-administration/installation/connect-to-existing-node/connect-docker-compose#docker--docker-compose","content":"The whole deployment is based on Docker and Docker Compose, therefore please follow the instructions on how to setup Docker and Docker Compose (find an Ubuntu-related guide here). You need at least docker engine version 17.06. "},{"title":"Ports","type":1,"pageTitle":"Connect to an Existing Network using Docker","url":"docs/operation-administration/installation/connect-to-existing-node/connect-docker-compose#ports","content":"Make sure that the following ports are not blocked by other processes: 80, 8080, 8081, 7447, 7448 We distinguish between two types of deployments: The local deployment type which will create images from the code you have on your local machine and includes any changes you might have doneThe master deployment type that will deploy Docker images out of the Docker Hub note Note: For the master deployment, you can use tags to specify the version you want to use "},{"title":"Connect to an existing Blockchain network","type":1,"pageTitle":"Connect to an Existing Network using Docker","url":"docs/operation-administration/installation/connect-to-existing-node/connect-docker-compose#connect-to-an-existing-blockchain-network","content":"Each Blockchain container comes with its own volume that persists the data of the Blockchain. To modify the host path, meaning the path where the data will be persisted on your local machine, navigate to the docker-compose file: docker-compose/master/slave-node.yml Copy If you want to run the network with your local sources, update the volume in the following file: docker-compose/local/slave-node.yml Copy Currently both Blockchain containers store their data in /tmp/bc* directories. This works fine for testing, but should not be used in productive environments since the /tmp/ folder is emptied after reboot on most Unix-like systems. Adapt the paths to your needs - you can change them in the respective docker-compose file, where you will find them under volumes: volumes: - /tmp/bcMasterVolume:/root/.multichain Copy Windows users: With Docker for Windows it's not possible to mount the volumes with this configuration. To be able do use the Docker-Compose installation you need to comment (or remove) the lines with the volumes configuration. The next step is to set all required environment properties, otherwise Docker will not receive the required parameters to start the deployment. If you want to start with the standard configuration we reccomend copying the .env_example file and rename it to .env in the TruBudget base folder: cp .env_example .env Copy The .env file to connect to an existing Blockchain network should consist of the following parameters: API_PORT=8080RPC_PORT=8000ORGANIZATION=TheNewOrganizationORGANIZATION_VAULT_SECRET=secretTAG=masterROOT_SECRET=root-secretP2P_TEST_HOST=52.52.52.52P2P_TEST_PORT=7448API_TEST_HOST=52.52.52.52API_TEST_PORT=8081P2P_PROD_HOST=52.52.52.52P2P_PROD_PORT=52.52.52.52API_PROD_HOST=52.52.52.52API_PROD_PORT=8080LOG_LEVEL=INFOPRETTY_PRINT=trueRPC_PASSWORD=s750SiJnj50yIrmwxPnEdSzpfGlTAHzhaUwgqKeb0G1jMULTICHAIN_DIR=&quot;/root&quot;EXTERNAL_IP=50.50.50.50 Copy note For detailed explenations of the environment variables, see the Enviroment Variables Assuming that all parameters are set, go ahead and start the deployment. To deploy the current codebase of the repository, run the following command: scripts/local/start-slave-node.sh Copy Deploy images of the Docker registry with: scripts/master/start-slave-node.sh Copy As long as you are not approved by the blockchain network, your blockchain nodes will constantly try to connect. Therefore please ask other organizations with admin nodes to approve your registration. Before approval, the log will look similar to this: test-bc-slave_1 | multichaind | Blockchain successfully initialized.test-bc-slave_1 |test-bc-slave_1 | Please ask blockchain admin or user having activate permission to let you connect and/or transact:test-bc-slave_1 | multichain-cli TrubudgetChain grant 1QSUFKSXTmHtpNYykuuFuZaxfMR6sJwS91kG2u connecttest-bc-slave_1 | multichain-cli TrubudgetChain grant 1QSUFKSXTmHtpNYykuuFuZaxfMR6sJwS91kG2u connect,send,receivebc-slave_1 | multichaind | Blockchain successfully initialized.bc-slave_1 |bc-slave_1 | Please ask blockchain admin or user having activate permission to let you connect and/or transact:bc-slave_1 | multichain-cli TrubudgetChain grant 1QSUFKSXTmHtpNYykuuFuZaxfMR6sJwS91kG2u connectbc-slave_1 | multichain-cli TrubudgetChain grant 1QSUFKSXTmHtpNYykuuFuZaxfMR6sJwS91kG2u connect,send,receive Copy Once your nodes are approved the log should look similar to: bc-slave_1 | multichaind | Other nodes can connect to this node using:bc-slave_1 | multichaind TrubudgetChain@172.22.0.2:7447bc-slave_1 |bc-slave_1 |bc-slave_1 | multichaind | Node ready.bc-slave_1 |bc-slave_1 |test-bc-slave_1 | &gt;&gt;&gt; Connecting to TrubudgetChain@192.0.0.1:7448test-bc-slave_1 | &gt;&gt;&gt; args=-txindex,-port=7448,-autosubscribe=streams,TrubudgetChain@192.0.0.1:7448test-bc-slave_1 | &gt;&gt; /root/.multichain/multichain.conf rpcport=8000test-bc-slave_1 | rpcuser=multichainrpctest-bc-slave_1 | rpcpassword=[redacted]test-bc-slave_1 | rpcallowip=0.0.0.0/0test-bc-slave_1 |test-bc-slave_1 | &gt;&gt; /root/.multichain/TrubudgetChain/multichain.conf rpcport=8000test-bc-slave_1 | rpcuser=multichainrpctest-bc-slave_1 | rpcpassword=[redacted]test-bc-slave_1 | rpcallowip=0.0.0.0/0test-bc-slave_1 |test-bc-slave_1 | multichaind | Retrieving blockchain parameters from the seed node 192.0.0.1:7448 ...test-bc-slave_1 |test-bc-slave_1 | multichaind | Other nodes can connect to this node using:test-bc-slave_1 | multichaind TrubudgetChain@172.22.0.3:7448test-bc-slave_1 |test-bc-slave_1 |test-bc-slave_1 | multichaind | Node ready.test-bc-slave_1 |test-bc-slave_1 |api_1 | Connecting to MultiChain node at http://bc-slave:8000api_1 | server is listening on 8080testapi_1 | Connecting to MultiChain node at http://test-bc-slave:8000testapi_1 | server is listening on 8080api_1 | [2018-08-10T08:42:37.357Z] DEBUG (TruBudget/1 on e0fdf1eb41e2): Created stream org:TheOrganizat with options {&quot;kind&quot;:&quot;organization&quot;,&quot;name&quot;:&quot;org:TheOrganizat&quot;}api_1 | [2018-08-10T08:42:37.372Z] TRACE (TruBudget/1 on e0fdf1eb41e2):api_1 | addressFromWallet: &quot;[redacted]&quot;api_1 | privkey: &quot;[redacted]&quot;testapi_1 | [2018-08-10T08:42:37.387Z] DEBUG (TruBudget/1 on 14d2111cc40d): Created stream org:TheOrganizat with options {&quot;kind&quot;:&quot;organization&quot;,&quot;name&quot;:&quot;org:TheOrganizat&quot;}api_1 | [2018-08-10T08:42:37.387Z] TRACE (TruBudget/1 on e0fdf1eb41e2): wrote hex string to chain: 282 bytesapi_1 | [2018-08-10T08:42:37.387Z] INFO (TruBudget/1 on e0fdf1eb41e2): Initializing organization address to local wallet address: [redacted]api_1 | [2018-08-10T08:42:37.387Z] DEBUG (TruBudget/1 on e0fdf1eb41e2): Publishing wallet address to org:TheOrganizat/&quot;address&quot;testapi_1 | [2018-08-10T08:42:37.399Z] TRACE (TruBudget/1 on 14d2111cc40d):testapi_1 | addressFromWallet: &quot;[redacted]&quot;testapi_1 | privkey: &quot;[redacted]&quot;api_1 | [2018-08-10T08:42:37.407Z] INFO (TruBudget/1 on e0fdf1eb41e2): organization address: [redacted]testapi_1 | [2018-08-10T08:42:37.420Z] TRACE (TruBudget/1 on 14d2111cc40d): wrote hex string to chain: 282 bytestestapi_1 | [2018-08-10T08:42:37.421Z] INFO (TruBudget/1 on 14d2111cc40d): Initializing organization address to local wallet address: [redacted]testapi_1 | [2018-08-10T08:42:37.421Z] DEBUG (TruBudget/1 on 14d2111cc40d): Publishing wallet address to org:TheOrganizat/&quot;address&quot;testapi_1 | [2018-08-10T08:42:37.435Z] INFO (TruBudget/1 on 14d2111cc40d): organization address: [redacted]api_1 | [2018-08-10T08:42:37.445Z] DEBUG (TruBudget/1 on e0fdf1eb41e2): Created stream users:TheOrganiz with options {&quot;kind&quot;:&quot;users&quot;,&quot;name&quot;:&quot;users:TheOrganiz&quot;}testapi_1 | [2018-08-10T08:42:37.474Z] DEBUG (TruBudget/1 on 14d2111cc40d): Created stream users:TheOrganiz with options {&quot;kind&quot;:&quot;users&quot;,&quot;name&quot;:&quot;users:TheOrganiz&quot;} Copy You are now successfully connected to the network and should be able to access the frontend via port 80 on the server that it is running on. Use the root user and the password that was defined in the .env file to initially login to the frontend and to create users of your organization. "},{"title":"Create a New Network Directly on Machine","type":0,"sectionRef":"#","url":"docs/operation-administration/installation/create-new-network/bare-metal","content":"","keywords":""},{"title":"Table of Contents","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#table-of-contents","content":"Create a New Network Directly on Machine Table of ContentsGet the repositoryBlockchainAPI Log-Rotation Excel Export Set Environment VariablesInstall Node ModulesStart the Service Provisioning Set environment variablesInstall node-modulesStart the Provisioning FrontendConnect to an existing Blockchain network "},{"title":"Get the repository","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#get-the-repository","content":"Clone the Github repository of the components onto the designated machines. Clone the repository: git clone https://github.com/openkfw/TruBudget.gitcd TruBudget Copy info If you work with an existing checkout, make sure you have the latest changes: git pull Copy "},{"title":"Blockchain","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#blockchain","content":"Set the following environment variables to deploy a new Blockchain network: export P2P_PORT=7447export RPC_PORT=8000export RPC_USER=&quot;multichainrpc&quot;export RPC_PASSWORD=&quot;password&quot;export MULTICHAIN_DIR=&quot;/root&quot; Copy Navigate into the blockchain directory and install the node packages defined in the package.json and start the Blockchain with: cd blockchain/npm installnpm start &gt; startup.log 2&gt;&amp;1 &amp; Copy The information within startup.log should look similar to: &gt; ACMECorp-chain-bc@0.1.0 start /[MULTICHAIN_DIR]/TruBudget/blockchain&gt; node src/index.js Provisioning mc MultiChain 2.0 alpha 2 Utilities (latest protocol 20002) Blockchain parameter set was successfully generated.You can edit it in /[MULTICHAIN_DIR]/.multichain/TrubudgetChain/params.dat before running multichaind for the first time. To generate blockchain please run &quot;multichaind TrubudgetChain -daemon&quot;.App listening on 8085stdout: Looking for genesis block... stdout: Genesis block found stdout: Other nodes can connect to this node using:multichaind TrubudgetChain@172.17.0.3:7447 stdout: Node ready. Copy "},{"title":"API","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#api","content":"Set the environment parameters listed below on the machine: export ORGANIZATION=MyOrgaexport P2P_PORT=7447export RPC_PORT=8000export PORT=8080export RPC_HOST=127.0.0.1export RPC_USER=multichainrpcexport RPC_PASSWORD=passwordexport ORGANIZATION_VAULT_SECRET=secretexport ROOT_SECRET=root-secret Copy Once Node.js is installed navigate into the api directory and run the following commands to start the API: cd ../apinpm installnpm run buildnode dist &gt; api.log 2&gt;&amp;1 &amp; Copy You can then check the api log via cat api.log Copy The api.log for a new Blockchain network should look similar to: [2018-10-03T09:36:08.872Z] INFO (TruBudget/4858 on 0a18bc69cac8): Connecting to MultiChain node protocol: &quot;http&quot; host: &quot;127.0.0.1&quot; port: 8000 username: &quot;multichainrpc&quot; password: &quot;password&quot;Register fastify endpointschema id ignored er58c69eg298c87e3899119e025eff1fschema id ignored fe9c2b24ade9a92360b3a898665678ac[2018-10-03T09:36:09.193Z] INFO (TruBudget/4858 on 0a18bc69cac8): server is listening on 8080[2018-10-03T09:36:09.224Z] INFO (TruBudget/4858 on 0a18bc69cac8): MultiChain connection established[2018-10-03T09:36:09.228Z] DEBUG (TruBudget/4858 on 0a18bc69cac8): Created stream org:MyOrga with options {&quot;kind&quot;:&quot;organization&quot;,&quot;name&quot;:&quot;org:MyOrga&quot;}[2018-10-03T09:36:09.232Z] TRACE (TruBudget/4858 on 0a18bc69cac8): addressFromWallet: &quot;[redacted]&quot; privkey: &quot;[redacted]&quot;[2018-10-03T09:36:09.237Z] TRACE (TruBudget/4858 on 0a18bc69cac8): wrote hex string to chain: 282 bytes[2018-10-03T09:36:09.237Z] INFO (TruBudget/4858 on 0a18bc69cac8): Initializing organization address to local wallet address: [redacted][2018-10-03T09:36:09.238Z] DEBUG (TruBudget/4858 on 0a18bc69cac8): Publishing wallet address to org:MyOrga/&quot;address&quot;[2018-10-03T09:36:09.241Z] INFO (TruBudget/4858 on 0a18bc69cac8): organization address: [redacted][2018-10-03T09:36:09.244Z] DEBUG (TruBudget/4858 on 0a18bc69cac8): Created stream users:MyOrga with options {&quot;kind&quot;:&quot;users&quot;,&quot;name&quot;:&quot;users:MyOrga&quot;}[2018-10-03T09:36:09.244Z] INFO (TruBudget/4858 on 0a18bc69cac8): organization stream present[2018-10-03T09:36:09.247Z] INFO (TruBudget/4858 on 0a18bc69cac8): node registered in nodes streamPublishing network.registerNode to nodes/&quot;[redacted]&quot;[2018-10-03T09:36:09.257Z] DEBUG (TruBudget/4858 on 0a18bc69cac8): Created stream nodes with options {&quot;kind&quot;:&quot;nodes&quot;,&quot;name&quot;:&quot;nodes&quot;}Publishing network.registerNode to nodes/&quot;[redacted]&quot; Copy "},{"title":"Log-Rotation","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#log-rotation","content":"As stated above, the API logs are printed to api.log. For operational purposes it is useful to have an application that manages the process and takes care of log rotation (i.e. breaking the logs into smaller chunks). Luckily, there are several applications that are capable of doing exactly that. One of them is PM2, which we will describe here shortly. PM2 is an application that handles node processes for you and restarts it after a crash. PM2 can be installed via the following command npm install -g pm2 Copy It offers a wide range of plugins called &quot;Modules&quot; that can be installed via PM2 directly. One of these modules is called &quot;pm2-logrotate&quot; which can be used to rotate logs (e.g. split them into chunks of certain size or create separate files for each day) and the command to install it is simply pm2 install pm2-logrotate Copy You can set up pm2-logrotate (if needed) with the following command pm2 set pm2-logrotate:&lt;param&gt; &lt;value&gt; Copy e.g: pm2 set pm2-logrotate:max_size 1K (sets max. file size to 1KB)pm2 set pm2-logrotate:compress true (compresses logs when rotated)pm2 set pm2-logrotate:rotateInterval '*/1 * * * *' (force rotate every minute, syntax similar to CRON) Copy cd apipm2 start dist/index.js Copy This is just an example. Please refer to the official documentation for more information. "},{"title":"Excel Export","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#excel-export","content":"To enable the export of TruBudget data into Excel files, a separate service needs to be started. To start that service, first change the directory to the excel-export-service folder: cd ../excel-export-service Copy "},{"title":"Set Environment Variables","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#set-environment-variables","content":"The following environment variables need to be set: Terminal Mac/Git Bash export PROD_API_HOST=127.0.0.1export TEST_API_HOST=127.0.0.1export PROD_API_PORT=8080export TEST_API_PORT=8081export PORT=8888export ACCESS_CONTROL_ALLOW_ORIGIN=&quot;*&quot; Copy Terminal Windows/Command Shell SET PROD_API_HOST=127.0.0.1SET TEST_API_HOST=127.0.0.1SET PROD_API_PORT=8080SET TEST_API_PORT=8081SET PORT=8888SET ACCESS_CONTROL_ALLOW_ORIGIN=&quot;*&quot; Copy "},{"title":"Install Node Modules","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#install-node-modules","content":"Install the node modules via npm install Copy "},{"title":"Start the Service","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#start-the-service","content":"npm start Copy "},{"title":"Provisioning","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#provisioning","content":"The Provisioning fills the blockchain with test-data. To start the provisioning, open your favorite shell, navigate to your provisioning folder and follow these instructions: cd ../provisioning Copy "},{"title":"Set environment variables","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#set-environment-variables-1","content":"&quot;API_PORT&quot;, &quot;ROOT_SECRET&quot; and &quot;ORGANIZATION&quot; variables have to be the same as when starting the API. Terminal Mac/Git Bash export API_PORT=8080export ORGANIZATION=&quot;MyOrga&quot;export ROOT_SECRET=root-secret Copy Terminal Windows/Command Shell SET API_PORT = 8080SET ORGANIZATION = &quot;MyOrga&quot;SET ROOT_SECRET = root-secret Copy "},{"title":"Install node-modules","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#install-node-modules-1","content":"npm install Copy "},{"title":"Start the Provisioning","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#start-the-provisioning","content":"npm start Copy "},{"title":"Frontend","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#frontend","content":"The first step to deploy the frontend is to adapt and set the environment parameters. If you plan to deploy only one API set PROD and TEST parameters, so that it points to the single API. cd ../frontend export PROD_API_HOST=127.0.0.1export PROD_API_PORT=8080export TEST_API_HOST=127.0.0.1export TEST_API_PORT=8080 Copy Navigate into the frontend directory and copy the nginx.conf into the designated nginx directory with: cp nginx.conf /etc/nginx/conf.d/default.conf Copy Install the node packages and start the production build: npm installnpm run build Copy Once the build was successful copy the build sources into the html directory of nginx: cp -R build/* /usr/share/nginx/html Copy The final step is to modify the nginx configuration, so that nginx points to the previous configured API instances. Caution: It's possible that nginx was automatically started after installation. To check if this is the case run ps aux | grep nginx Copy If you see matching entries, simply run nginx -s stop Copy to stop all running processes. To start the frontend, run the following command: /bin/bash configureServer.sh Copy As soon as the step above is done, the frontend should be available on port 80. Make sure that port 80 is exposed and not blocked by any firewall or other processes. "},{"title":"Connect to an existing Blockchain network","type":1,"pageTitle":"Create a New Network Directly on Machine","url":"docs/operation-administration/installation/create-new-network/bare-metal#connect-to-an-existing-blockchain-network","content":"This section describes how you can setup a slave node on another server that will try to connect to the master node. You cannot run the slave node on the same server where the master node is located because the port 7447 is already used by master node. If you want also want to setup an API and Frontend, follow the instructions from Frontend and API. To connect to an already existing Blockchain network adapt and set the following environment parameters: export ORGANIZATION=&quot;YourOrga&quot;;export RPC_PORT=8000;export RPC_USER=&quot;multichainrpc&quot;;export RPC_PASSWORD=&quot;password&quot;;export RPC_ALLOW_IP=&quot;0.0.0.0/0&quot;;export MULTICHAIN_DIR=&quot;/root&quot;export EXTERNAL_IP = [external IP here];export P2P_PROD_HOST = [IP of prod instance of seed node];export P2P_PROD_PORT = [MultiChain port of prod instance of seed node];export P2P_TEST_HOST = [IP of test instance of seed node];export P2P_TEST_PORT = [MultiChain port of test instance of seed node];export API_PROD_HOST=[IP of seed API (prod)];export API_PROD_PORT=[port of seed API (prod)];export API_TEST_HOST=[IP of seed API (test)];export API_TEST_PORT=[port of seed API (test)]; Copy Navigate into the blockchain directory and install the node packages defined in the package.json and start the Blockchain with: cd blockchain/npm installnpm start &gt; startup.log 2&gt;&amp;1 &amp; Copy Since you are trying to connect to an already existing Blockchain network the node has to be approved by a master node. Before the approval, the startup.log should look similar to: TrubudgetChain http 192.168.96.3 8080 7447 TrubudgetChain@192.168.96.3:7447&gt;&gt;&gt; Args: -txindex,-port=7447,-autosubscribe=streams,TrubudgetChain@192.168.96.3:7447,,&gt;&gt; [MULTICHAIN_DIR]/.multichain/TrubudgetChain/multichain.conf rpcport=8000rpcuser=multichainrpcrpcpassword=passwordrpcallowip=0.0.0.0/0multichaind | Retrieving blockchain parameters from the seed node 192.168.96.3:7447 ...multichaind | Blockchain successfully initialized.multichaind | Please ask blockchain admin or user having activate permission to let you connect and/or transact:multichaind | multichain-cli TrubudgetChain grant [redacted] connectmultichaind | multichain-cli TrubudgetChain grant [redacted] connect,send,receivemultichaind |MultiChain 2.0 alpha 2 Daemon (latest protocol 20002)&gt;&gt;&gt; Multichain stopped. Retry in 10 Seconds... Copy After the node was approved by the master node, the startup.log should update to this: &gt;&gt; MULTICHAIN_DIR/.multichain/multichain.conf rpcport=8000rpcuser=multichainrpcrpcpassword=passwordrpcallowip=0.0.0.0/0 TrubudgetChain http 192.168.96.3 8080 7447 TrubudgetChain@192.168.96.3:7447&gt;&gt;&gt; Args: -txindex,-port=7447,-autosubscribe=streams,TrubudgetChain@192.168.96.3:7447,,&gt;&gt; MULTICHAIN_DIR/.multichain/TrubudgetChain/multichain.conf rpcport=8000rpcuser=multichainrpcrpcpassword=passwordrpcallowip=0.0.0.0/0 multichaind | Retrieving blockchain parameters from the seed node 192.168.96.3:7447 ...multichaind | Other nodes can connect to this node using:multichaind TrubudgetChain@172.17.0.3:7447This host has multiple IP addresses, so from some networks:multichaind TrubudgetChain@192.168.96.2:7447multichaind | Node ready. Copy "},{"title":"Create a New Network with Docker-Compose","type":0,"sectionRef":"#","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose","content":"","keywords":""},{"title":"Table of Contents","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#table-of-contents","content":"Create a New Network with Docker-Compose Table of ContentsPrerequisites Docker &amp; Docker ComposePorts and IP Addresses for TruBudgetVerify versionClean installation Create a new Blockchain networkConnect to an existing Blockchain network "},{"title":"Prerequisites","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#prerequisites","content":""},{"title":"Docker & Docker Compose","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#docker--docker-compose","content":"The whole deployment is based on Docker and Docker Compose, therefore you need to install Docker (version 20.10.7 or higher) and Docker Compose (version 1.29.2 or higher). "},{"title":"Ports and IP Addresses for TruBudget","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#ports-and-ip-addresses-for-trubudget","content":"Make sure that the following ports are not blocked by other processes: 3000, 8080, 8090, 9000, 8081, 7447, 7448. Also make sure that IPv4 subnet mask 172.21.0.0/24 is free to use on your computer. If the subnet mask or some ports are already used by other proccesses or programs, you can easily change the port in the .env file that is located in /scripts/operations/. "},{"title":"Verify version of TruBudget","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#verify-version-of-trubudget","content":"Start with checking out the repository: git clone https://github.com/openkfw/TruBudgetcd TruBudget Copy This will create a local copy of the latest source code in a folder called TruBudget (= your local checkout). If you work with an existing checkout, make sure you have the latest changes: git checkout mastergit pull Copy "},{"title":"Clean installation","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#clean-installation","content":"If you have previously started a TruBudget instance and want to start a new Blockchain network without previously stored data, remove the Docker volumes with: sudo rm -r /masterVolumesudo rm -r /slave1Volumesudo rm -r /minioVolumesudo rm -r /emaildbVolume Copy If this is either your first time starting TruBudget or you want to resume where you left off, skip this step. "},{"title":"Create a new Blockchain network","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#create-a-new-blockchain-network","content":"Each Blockchain container comes with its own volume that persists the data of the Blockchain. To modify the host path, meaning the path where the data will be persisted on your local machine (docker volume), you can change it in the docker-compose file scripts/operation/docker-compose.yml. The next step is to set all required environment properties, otherwise Docker will not receive the required parameters to start the deployment. If you want to start with the standard configuration we recommend copying the .env_example file and rename it to .env in the TruBudget base folder: cd scripts/operation/cp .env_example .env Copy The .env in scripts/operation/ can be edited directly to fit your needs. note For detailed explenations of the environment variables, see the Environment Variables To start the TruBudget in an easy way, use the bash script start-trubudget.sh. If you want to start a setup with one blockain, frontend, API and provisioning (for test data), run: cd scripts/operation/bash start-trubudget.sh --slim Copy If you want to add an additional blockchain node, email-notification-service, excel-export-service or storage-service, please take a look at the README.md of operation setup The frontend should be accessible via port 3000 on the server that it is running on: http://localhost:3000/ The API Swagger documentation should be accessible via port 8080 on the server that it is running on: http://localhost:8080/api/documentation/static/index.html "},{"title":"Connect to an existing Blockchain network","type":1,"pageTitle":"Create a New Network with Docker-Compose","url":"docs/operation-administration/installation/create-new-network/create-new-docker-compose#connect-to-an-existing-blockchain-network","content":"The docker-compose file in scripts/operation/ comes with one additional blockchain node (slave-node) that trys to connect to the master node after starting. Each Blockchain container comes with its own volume that persists the data of the Blockchain. To start TruBudget with two organizations (master and slave), run: bash start-trubudget.sh --slim --add-organization Copy This will create the blockchain, API and frontend for each of both organizations. You can access the frontend of the slave-node with http://localhost:3005/ and the for the master-node with http://localhost:3000/. This is defined in the docker-compose.yml file. The slave-node must be approved by the master-node. This can be done with the root user in the master frontend at the page http://localhost:3000/nodes. The name of both organization and other configurations are defined in the .env file (in the directory scripts/operation/). note If you need more slave-nodes, you have to change the docker-compose.yml file and start-trubudget.sh in the directory scripts/operation/ by yourself. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/operation-administration/installation/README","content":"","keywords":""},{"title":"Table of Contents","type":1,"pageTitle":"Introduction","url":"docs/operation-administration/installation/README#table-of-contents","content":"Starting a new network or connecting to an existing network With Docker (recommended)Without Docker Update TruBudget "},{"title":"Logging","type":0,"sectionRef":"#","url":"docs/operation-administration/logging","content":"","keywords":""},{"title":"API Log","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#api-log","content":"The API is the central part of the TruBudget application. It handles the requests from the frontend and manages the data that is written to the blockchain. Therefore logging is a cruicial part of the API's operation, so that the administrator is informed of where and when errors occur. TruBudget can be installed in 3 possible flavors: Bare Metal - All componends (Node.js, Multichain, nginx, etc.) are installed directly onto the machine that will be running the applicationDocker-Compose - All parts of the application are available as docker images, so they are pulled from a registry and started by docker on the host machineKubernetes - The containers with the different parts of the application are managed and orchestrated by Kubernetes The API logs are printed to the standard output (STDOUT and STDERR) by default. This way the application does not need to worry about file paths, log rotation and other operations topics. We have compiled a list of recomended practices for handling the logs for each installation type. "},{"title":"Bare metal","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#bare-metal","content":"As stated above, the API logs are printed to STDOUT/STDERR, which means that they are just displayed to the console. We therefore need an application that can take care of the node process and re-route the logs for us. Luckily, there are several applications that are capable of doing exactly that. One of them is PM2, which we will describe here shortly. PM2 is an application that handles node processes for you and restarts it after a crash. PM2 can be installed via the following command npm install -g pm2 Copy It offers a wide range of plugins called &quot;Modules&quot; that can be installed via PM2 directly. One of these modules is called &quot;pm2-logrotate&quot; which can be used to rotate logs (e.g. split them into chunks of certain size or create separate files for each day) and the command to install it is simply pm2 install pm2-logrotate Copy After setting up pm2-logrotate (if needed) you can run the api with pm2 cd apipm2 start dist/index.js Copy This is just an example. Please refer to the official documentation for more information. "},{"title":"Docker-Compose","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#docker-compose","content":"When choosing the Docker-Compose setup, all messages that are printed to STDOUT/STDERR are available via the docker logs command. On UNIX systems, the logs are available on /var/lib/docker/containers/[container-id]/[container-id]-json.log and can be processed with applications like Logrotate. Another possibility is to use the EFK stack which will be described below. "},{"title":"Kubernetes","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#kubernetes","content":"When operating the application via Kubernetes it is recommended to use the EFK stack, which will be described in more detail below. "},{"title":"The EFK stack","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#the-efk-stack","content":"The EFK stack consists of the following components: Elasticsearch - A backend for indexing and persisting dataFluentd/Fluentbit - An aggregator for log filesKibana - A frontend to visualize logs and work with them The EFK stack is a powerful set of software that enables advanced administration of log information. The logs are aggregated from all sources via Fluentd or Fluent Bit, sent to Elasticsearch and can then be viewed in Kibana. Fluentd and Fluent Bit are similar applications that perform similar tasks, but Fluentd is more versatile and heavyweight whereas Fluent Bit is lightweight and not as rich in functionalities. "},{"title":"EFK & Docker-Compose","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#efk--docker-compose","content":"In the Docker-Compose setup, we have mainly two different options of getting the logs of the containers: Use the &quot;Tail&quot; input plugin and select the path of the docker logs as inputUse the &quot;Fluentd&quot; log plugin that is built into Docker that automatically posts the log entries to the TCP port 24224 and then use the input plugin &quot;Forward&quot; to connect to the port 24224 and receive the log messages. Elasticsearch and Kibana can then be installed in Docker containers or locally. "},{"title":"EFK and Kubernetes","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#efk-and-kubernetes","content":"The Helm chart for Kubernetes can be configured such that a Fluent Bit pod is created on every node (see the reference architecture). The Fluent Bit pod then gathers all logs from the other pods on the node, adds some Kubernetes meta data (like pod names, cluster name, etc.) and sends it to a defined destination. In the reference architecture this destination is Fluentd, but if no further processing is required, the log data can be sent to Elasticsearch directly. "},{"title":"Logging Guidelines and information","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#logging-guidelines-and-information","content":"This section contains guidelines and standards regarding logging and should be expanded as the application matures. "},{"title":"Logger - Pino","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#logger---pino","content":"The logger used in the application is called &quot;Pino&quot; and you can find the documentation here. Why was Pino used instead of Winston? The reason is that Pino is compatible with Fastify, whereas Winston is not (at least not out of the box). "},{"title":"Logging - format","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#logging---format","content":"Pino supports several log levels (from trace to fatal). To make sure that the relevant information is in place, each log entry should include an object containing meta data if possible. Error# The call of the &quot;error&quot; level should always contain data of the situation as an &quot;err&quot; object. Example: logger.error({ err }, &quot;Stream not found.&quot;); Copy where err is the object containing information on the root cause of the error. "},{"title":"Environment variables","type":1,"pageTitle":"Logging","url":"docs/operation-administration/logging#environment-variables","content":"There are two settings of the Pino logger that are set via environment variables. Set PRETTY_PRINT to &quot;true&quot; to enable pretty printing Set the log level via LOG_LEVEL. This will setting will be used for every service by default. The possible values are: &quot;trace&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot;, &quot;error&quot; and &quot;fatal&quot;. The developer and operation startup scripts control the log level for each service specifically (see .env_example files in scripts folder). Following Variables can be modified there: Set the log level via API_LOG_LEVEL. Controls Log Level for API.Set the log level via BLOCKCHAIN_LOG_LEVEL. Controls Log Level for the BlockchainSet the log level via EXCEL_LOG_LEVEL. Controls Log Level for Excel ServiceSet the log level via EMAIL_LOG_LEVEL. Controls Log Level for Email ServiceSet the log level via PROVISIONING_LOG_LEVEL. Controls Log Level for ProvisioningSet the log level via STORAGE_LOG_LEVEL. Controls Log Level for Storage Service "},{"title":"Introduction and Basics","type":0,"sectionRef":"#","url":"docs/operation-administration/introduction","content":"","keywords":""},{"title":"Architecture","type":1,"pageTitle":"Introduction and Basics","url":"docs/operation-administration/introduction#architecture","content":"Following architecture diagram shows a Trubudget network with 3 standard nodes from 3 different Organizations. A standard node is a Trubudget node with minimal components to function. Organizations can decide which additional Trubudget features they want to add or if they want to connect their own system via Trubudget's api.  "},{"title":"Environment variables","type":1,"pageTitle":"Introduction and Basics","url":"docs/operation-administration/introduction#environment-variables","content":"All installation and user guides have one thing in common: They all use environment variables to customize the setup of TruBudget. To get started, you should know about the environment variables, their purpose and how to set them. "},{"title":"Setting environment variables","type":1,"pageTitle":"Introduction and Basics","url":"docs/operation-administration/introduction#setting-environment-variables","content":"Environment variables need to be set via the command line. Usually, they are only valid for the active session, i.e. if you close the terminal window in which you have set the environment variable and then open a new command line window, the value of the environment variable is lost. Setting an environment variable requires different commands in Linux/OS X and Windows: export VARIABLE=&quot;value&quot; (Linux / OS X)set VARIABLE=&quot;value&quot; (Windows) Copy To check the value of a given variable, run the following command: echo $VARIABLE (Linux / OS X)echo %VARIABLE% (Windows) Copy note In this case we assume you use the standard command line tool for Linux/OS X (which is Bash) and Windows (which is CMD). Another option to set environment variables is to use a .env file in the directory where the start command is executed. Trubudget provides a default example .env_example file which has to be renamed to .env if it should be used. "},{"title":"Environment Variables in TruBudget","type":1,"pageTitle":"Introduction and Basics","url":"docs/operation-administration/introduction#environment-variables-in-trubudget","content":"You can find the documentation of all environmental variables in environment-variables. If you need a .env_example file as a template, use the .env_example file in /scripts/operation. This file has all values pre-filled. Kubernetes# Env Variable\tRequired\tDefault Value\tUsed by\tDescriptionEXPOSE_MC\tno\tfalse\tbc\tIf set to true Trubudget tries to expose it's multichain via kubernetes' ingress. First a kubernetes config file is searched in /.kube/config. If not found and the MC is deployed in a cluster, it is searching for the service account to get the information. After configuration the externalip arg is set to the ip of the service' ingress of the configured clusterSERVICE_NAME and NAMESPACE are required to access the ingress of the service. SERVICE_NAME\tno bc\tThis variable is only required if EXPOSE_MC is set to true. It defines which service the kubernetes client should search for in the configured kubernetes cluster NAMESPACE\tno bc\tThis variable is only required if EXPOSE_MC is set to true. It defines in which namespace the kubernetes client should search for the given service "},{"title":"Organizations and Nodes in TruBudget","type":1,"pageTitle":"Introduction and Basics","url":"docs/operation-administration/introduction#organizations-and-nodes-in-trubudget","content":"One of the terms used most in TruBudget is organization. This section describes what organizations are in the context of TruBudget and how they interact with each other. An organization is a stakeholder in the funding process (e.g. Ministry of X). TruBudget is designed to connect multiple organizations together. Each organization creates their own users. Each user is associated to exactly one organization and can only login to nodes of that organization. An organization can run one or more nodes. Each organization has exactly one wallet that can be used to vote when granting or revoking permissions to other wallet addresses, which is key to preventing a 51%-attack against the network. This means that even if one organization has multiple nodes, it gets only one vote for adding new organizations to the network. Each organization has one shared key to en-/decrypt the user data, which is set in via the ORGANIZATION_VAULT_SECRET. Every node of one organization needs to use the same key. If one node of an organization uses the same organization name, but a different organization vault secret, users created on other nodes cannot login on this faulty node, even though the name of the organization is the same. "},{"title":"Let's look at this using some examples.","type":1,"pageTitle":"Introduction and Basics","url":"docs/operation-administration/introduction#lets-look-at-this-using-some-examples","content":"Two organizations: OrgaA (origin node), OrgaB (connecting to Organization A), Each with one Node# OrgaA starts a new origin node (i.e. a new, empty blockchain) and creates a new user called Alice. At this point, OrgaA has 100% voting power in the network since it is the only node. OrgaB then connects to OrgaA's node. After OrgaA approves the addition of a new node, OrgaB synchronizes the data and creates a new user called Bob. Alice and Bob can now both see the complete user list of the network (i.e. Alice and Bob), but Alice cannot login on OrgaB's node and Bob cannot login on OrgaA's node since they don't have the same ORGANIZATION_VAULT_SECRET. Each of the organizations now holds 50% of the voting power in the network. Two organizations: Additional Node# OrgaA has employees in another location and decides to add another node on a server on this location. OrgaA then creates a new node with the same name and ORGANIZATION_VAULT_SECRET. The request for a new node of an existing organization pops up in the frontend for both organizations. The addition of a new node for one organization does not create a new wallet address and therefore also does not need more than 50% approval. OrgaA approves the addition of a new node and creates a user account for Ava. Both OrgaA and OrgaB still hold 50% of the voting power. Ava visits the other work location to work together with Alice. She can log in on the same node as Alice, since they share the same organization vault secret. Three organizations: OrgaC decides to join# OrgaC wants to join the network and connects to OrgaA. The request for approval is visible on the frontends of OrgaA and OrgaB. Since both of them hold 50% of the voting power, both organizations need to approve OrgaC before it can join the network. After both organizations approve OrgaC, the data is synchronized and OrgaC creates a new user called Charlie. Like for the other organizations, Charlie can only login on the node of OrgaC. All three organizations now hold 33.33% of the voting power in the network. "},{"title":"Further reading","type":1,"pageTitle":"Introduction and Basics","url":"docs/operation-administration/introduction#further-reading","content":"If you want to read more about the concept of organizations, have a look at the Multi Node Setup ADR. "},{"title":"Multichain-Cli","type":0,"sectionRef":"#","url":"docs/operation-administration/multichain-cli","content":"","keywords":""},{"title":"Querying TruBudget multichain","type":1,"pageTitle":"Multichain-Cli","url":"docs/operation-administration/multichain-cli#querying-trubudget-multichain","content":"Multichain streams are used as a general purpose append only database, retrievable by transaction ID (txid), name (often ID used in application) or ref. Data is stored in TruBudget as a set of defined events in the stream, retrievable by stream and key . No items in blockchain can be deleted or overwritten. It is up to the application to interpret the data it fetches from the chain. All items/transactions are timestamped, which makes the order of operations on a piece of data clear. There are separate streams for groups, users, organizations, projects etc. You can notice that names of project streams are the IDs visible on frontend. You can pass these to parameters of other multichain-cli commands. For example, when the workflowitem is created, that event is stored in TruBudget stream with project ID, and subproject ID and workflowitem ID are used as keys. How to list streams liststreams How to list projects liststreamitems with key details: { kind: &quot;project&quot; } How to see information about stream getstreaminfo ID/ref/creation txid Example to get info about project stream with project ID passed as argument: getstreaminfo fe29bc903d155f4214e50ab7189dbec9 How to see project details liststreamitems projectId e.g. liststreamitems fe29bc903d155f4214e50ab7189dbec9 Observe, that we do not get complete details of a project with all subprojects and workflowitems. How to see subproject details liststreamkeyitems &quot;projectId&quot; &quot;subprojectId&quot; (with double quotes) e.g.liststreamkeyitems &quot;fe29bc903d155f4214e50ab7189dbec9&quot; &quot;190d7bd8409d3ca905c727b48fb28bd8&quot; "},{"title":"Network, nodes, status","type":1,"pageTitle":"Multichain-Cli","url":"docs/operation-administration/multichain-cli#network-nodes-status","content":"How to get general information about the node and blockchain getinfo return, among other, name of blockchain, description, node address, protocol, p2p port, number of connected peer nodes How to gen network multichain node is connected to getnetworkinfo How to get infromation about connected nodes getpeerinfo returns an array of objects representing peer connected nodes, including IP address and ping How to get information about all nodes in the network This is two step-process. First list all nodes from the TruBudget nodes stream: liststreamkeyitems &quot;nodes&quot; &quot;*&quot;. Every node has an address. We can list permissions of a particular node with listpermissions all &quot;1E2XKauFRbK6vhGv3iSEyobpSY7EKvK14MAyLc&quot;. Alternatively, we can list all permissions of all nodes:listpermissions. Nodes that have been granted no permission to connect to the chain do not have connect permission. Either it has not yet been granted, or has been revoked. "},{"title":"Further info","type":1,"pageTitle":"Multichain-Cli","url":"docs/operation-administration/multichain-cli#further-info","content":"Read more about MultiChain Streams MultiChain API documentation "},{"title":"Updateing TruBudget","type":0,"sectionRef":"#","url":"docs/operation-administration/update-trubudget","content":"","keywords":""},{"title":"Full state backup","type":1,"pageTitle":"Updateing TruBudget","url":"docs/operation-administration/update-trubudget#full-state-backup","content":"The full state of a node and all its configuration parameters is saved in the node's blockchain directory (e.g. [PathToMultichainData]/.multichain/TrubudgetChain/). When backing up the full state of your node, it is required to stop the container first, otherwise the consistency of the backed-up files cannot be ensured. Stop the multichain daemon of the node you want to updateCopy the whole chain folder (e.g. TrubudgetChain) located in the .multichain folder of the node[Optional] Update TrubudgetPut the copied chain folder in the .multichain folder of the new or updated nodeStart the multichain daemon again so it can connect with its old wallet address/private keys tip Note that a node which is started after an update but before replacing the chain folder, the node will ask for permission to connect to the network since it received a new wallet address.If the Trubudget blockchain is running with docker there is currently no way to replace the folder before starting. The network will receive a network access request and currently it cannot be removed from the request stack.Make sure the multichain folder especially the wallet.dat file is deleted or securely saved afterwards since it contains the node's private keys and wallet address. "},{"title":"Full state backup via backup endpoint","type":1,"pageTitle":"Updateing TruBudget","url":"docs/operation-administration/update-trubudget#full-state-backup-via-backup-endpoint","content":"TruBudget provides a backup endpoint that allows to perform a backup via the frontend. For a detailed explanation how to create/restore a backup via the frontend check out this guide Create/Restore a Backup. Log into Trubudget's frontend with the root userClick the backup download button in the side navigation barCaution: The downloaded backup.gz file can be used to restore the Trubudget node's state again including wallet address and private keys, so be careful.Stop the nodeUpdate the node to a newer versionStart the node againLog into Trubudget's frontend with the root userClick the backup restore button in the side navigation bar and provide the backup.gz fileAfter a successful restore the root user is logged out automatically tip Only the root user can download/restore a backup via frontend/api.Note that a node which is started after an update but before replacing the chain folder, the node will ask for permission to connect to the network since it received a new wallet address. "},{"title":"Wallet backup","type":1,"pageTitle":"Updateing TruBudget","url":"docs/operation-administration/update-trubudget#wallet-backup","content":"It is possible to perform a backup only of the wallet.dat file. Thus it is not necessary to stop the node and the size of the backed-up data is considerably smaller. The wallet.dat is stored in a node's blockchain directory [PathToMultichainData]/.multichain/TrubudgetChain/. Copy the wallet.dat file located in a node's blockchain directoryObtain a another node's addressDelete the node's blockchain directory[Optional] Update TruBudgetStart to connect to the network using the previously obtained node addressReplace the newly created wallet.dat file with the backed-up version of the wallet.dat fileStart the multichain daemon again and connect to the networkDelete the copy of the wallet.dat file Hints MultiChain provides the API command backupwallet to directly back up the wallet.dat file but it won't work with the TrubudgetChain, so it is required to copy the file manually.Note that after the update a node asks for permission to connect again until the wallet.dat file is replaced since it received a new wallet address.Make sure the multichain folder especially the wallet.dat file is deleted or securely saved afterwards since it contains the node's private keys and wallet address. For further information how to back up and restore a node check out the MultiChain Website: Backing Up and Restoring Nodes. "},{"title":"wallet.dat","type":1,"pageTitle":"Updateing TruBudget","url":"docs/operation-administration/update-trubudget#walletdat","content":"In the wallet.dat file the wallet address and the private key of a node's wallet is stored. Based on a node's address it will be granted access by the master node. The node is then identified and remembered by its wallet address within the network. Since it's a node's identification it has to be kept confidential and should not be shared with any third party. "},{"title":"params.dat","type":1,"pageTitle":"Updateing TruBudget","url":"docs/operation-administration/update-trubudget#paramsdat","content":"In the params.dat file all basic chain parameters are stored. The parameters configure the blockchain and can be modified before the blockchain is initialized. A node's parameters can be retrieved using the getblockchainparams API command. A full list of the blockhain's parameters can be found on the MultiChain Website: Blockchain Parameters. "},{"title":"multichain.conf","type":1,"pageTitle":"Updateing TruBudget","url":"docs/operation-administration/update-trubudget#multichainconf","content":"MultiChain creates two multichain.conf files. One is stored in the MultiChain's directory [PathToMultichainData]/.multichain and the other one inside of the TrubudgetChain's directory [PathToMultichainData]/.multichain/TrubudgetChain. Both contain basic configuration parameters like the RPC Port, the RPC User, the RPC Password and the RPC Allow IP. The first multichain.conf file is created when the blockchain is set up. The second one is created when the node is initialized. "},{"title":"Hints and Pitfalls","type":1,"pageTitle":"Updateing TruBudget","url":"docs/operation-administration/update-trubudget#hints-and-pitfalls","content":"A downloaded backup might sometimes be saved with an invalid hash. When trying to restore the backup using this corrupted .gz file, the error shown below might occur.  If this error occurs and you are certain that the backup.gz compressed folder you want to upload is indeed a valid TruBudget backup, you can run a script that will fix the invalid hash, in order to sucessfully restore the backup. Navigate to the /blockchain folder and open your favorite shellType npm run check_backup and add the path to the backup.gz file you want to fix (e.g. npm run check_backup -- &quot;path/to/backup.gz&quot;)The script will print out the result of the check which tells you if the backup is valid or not.Optionally, type -f/--fix after the path. This option will also fix the hash if it is invalid. A new file backup updated.gz will be created in the same location as the one you provided. It is an exact copy of your backup, but with a corrected hashYou can now use this file to restore your backup note If your filename contains a blank space (e.g. backup (1).gz), you should use quotation marks when entering the path, so it will be recognized as one argument and not two separate ones. "},{"title":"Security @ TruBudget","type":0,"sectionRef":"#","url":"docs/operation-administration/security","content":"","keywords":""},{"title":"FAQ","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#faq","content":""},{"title":"Why an implementation of TruBudget with Blockchain Multichain technology? What are the reasons or advantages compared to other Blockchain implementations or technologies?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#why-an-implementation-of-trubudget-with-blockchain-multichain-technology-what-are-the-reasons-or-advantages-compared-to-other-blockchain-implementations-or-technologies","content":"Multichain is a high-performance private/permissioned blockchain technology which allows high-throughput on standard hardware. Additionally, it works well in cases of network partitions. "},{"title":"Is there a standard architecture for the TruBudget Multichain Blockchain?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#is-there-a-standard-architecture-for-the-trubudget-multichain-blockchain","content":"TruBudget was developed in a classical layered 3-tier architecture model. The TruBudget API uses the Hexagonal Architecture Standard. Communication uses HTTP over JSON API Standards and the Frontend uses the Atomic Design Principles. "},{"title":"What are the reasons that justify TruBudget becoming an OPEN solution? In terms of security, isn't there a risk?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-are-the-reasons-that-justify-trubudget-becoming-an-open-solution-in-terms-of-security-isnt-there-a-risk","content":"Open-Sourcing allows multiple parties to use TruBudget without procuring the software (which is a timely exercise). Open-Source is at no costs. From a security perspective open-sourcing is making development more transparent and required automatically a higher level of quality. TruBudget enforces modern Security Standards and all necessary secrets have to be set at Runtime. "},{"title":"What processes are implemented in TruBudget and what are the different possible applications?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-processes-are-implemented-in-trubudget-and-what-are-the-different-possible-applications","content":"In general, all processes important to more than 1 stakeholder/business partner may be carried out on TruBudget. Examples: Request to sign a contract by stakeholder A – Upload of signed contract by stakeholder BRequest to approve a report by A – Upload of approved report by BRequest to give no-objection to tender documents by A– Documented no-objection by BPayment documented by A – Confirmation of receipt by B.Information by A – Validation by B. Internal processes are not supposed to be part of TruBudget as it is a multi-stake-holder tool. TruBudget is very flexible in regard to the applied processes. In each use case the stakeholders will decide on relevant processes to be put on TruBudget in order to facilitate their joint business. "},{"title":"Is data confidentiality taken into account in TruBudget? If yes, how?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#is-data-confidentiality-taken-into-account-in-trubudget-if-yes-how","content":"Data confidentiality is guaranteed on API level. Users need to be authenticated and authorized in order to request data from the API based on a role-base access model. Data at rest (in the blockchain) is visible to persons with access to production server. "},{"title":"In terms of application security, does TruBudget integrate the concept of multi- signature?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#in-terms-of-application-security-does-trubudget-integrate-the-concept-of-multi--signature","content":"No. Transactions are signed with the user’s private key which is related to an organizational wide secret. Transactions can only be signed on nodes of the user’s organization. Multiple signing is possible, but not implemented (e.g. 4 eyes principle). However, within an organization writing rights on TruBudget may be organized according to internal requirements (e.g. internal approvals before entering data). "},{"title":"What security measures or mechanisms are planned for TruBudget's interface with other business applications?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-security-measures-or-mechanisms-are-planned-for-trubudgets-interface-with-other-business-applications","content":"Given that the proper functioning of TruBudget is linked to existing tools and their interfaces TruBudget exposes a secured API. Access to the API is secured with JWT Token (1 day validity). The tokens can be obtained using Basic Auth through a Login endpoint. "},{"title":"What are the benefits of TruBudget in terms of ergonomics, ease of use, ease of access, user interfaces?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-are-the-benefits-of-trubudget-in-terms-of-ergonomics-ease-of-use-ease-of-access-user-interfaces","content":"no double entries of datadata are generated while working on processesall stakeholders use same data, no need to compare dataautomatic exchange of data will replace cumbersome reportsvalidated data will improve quality of data-based planning and reportingaccess to high quality data at any time in real-timeuser interface easy to use, limited training needs for usersweb-based application, no need for hardware investmentsno need to change current IT systems (as TruBudget is linked via API)API linkage to stakeholders’ IT systems allows use through own ERP instead of TruBudget user interface "},{"title":"How could exchange channels be encrypted?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#how-could-exchange-channels-be-encrypted","content":"On node-level communication needs to be ensured through VPN or with the use of Multichain Enterprise. On API level communication is encrypted using TLS. "},{"title":"Is the TruBudget Multichain Blockchain auditable? Is it possible to follow the proper functioning of the TruBudget Multichain Blockchain? Is it possible to read the transactions? If yes, how?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#is-the-trubudget-multichain-blockchain-auditable-is-it-possible-to-follow-the-proper-functioning-of-the-trubudget-multichain-blockchain-is-it-possible-to-read-the-transactions-if-yes-how","content":"Yes, every change is stored in an immutable transaction and can’t be deleted. The transactions can be accessed through TruBudget’s history functionality or by using the low-level Multichain API “getBlock”. "},{"title":"What are the constraints or requirements for deploying the TruBudget Multichain Blockchain: network interconnection technology between nodes, speed, bandwidth, platforms (Windows, Linux, MacOS), resources (Processor, memory, hard disk space)?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-are-the-constraints-or-requirements-for-deploying-the-trubudget-multichain-blockchain-network-interconnection-technology-between-nodes-speed-bandwidth-platforms-windows-linux-macos-resources-processor-memory-hard-disk-space","content":"The requirements can be found in the minimum requirements. "},{"title":"What is the maximum number of nodes that TruBudget can support?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-is-the-maximum-number-of-nodes-that-trubudget-can-support","content":"There is no realistic limitation here. "},{"title":"What are the requirements for integrating Nodes into TruBudget?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-are-the-requirements-for-integrating-nodes-into-trubudget","content":"There are two ways Nodes can join the TruBudget network: A node of a new organization wants to joinA node of an existing organization wants to join In both cases a certain number of organizations in the network has to approve the new node. The difference is that a new organization needs 51% of all organizations in the network and a new node of an existing organization only needs one approval. More about how to connect a new node to an existing network can be found in the documentation of Connect to an existing network. "},{"title":"Given that third party organizations who manage blockchain nodes are required to comply with the same security standards, what is the security policy or security measures applicable to the nodes to be integrated into TruBudget in terms of security governance (governance model, node control process), regulatory requirements, prevention (data protection, application protection, identity protection, infrastructure protection), resilience?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#given-that-third-party-organizations-who-manage-blockchain-nodes-are-required-to-comply-with-the-same-security-standards-what-is-the-security-policy-or-security-measures-applicable-to-the-nodes-to-be-integrated-into-trubudget-in-terms-of-security-governance-governance-model-node-control-process-regulatory-requirements-prevention-data-protection-application-protection-identity-protection-infrastructure-protection-resilience","content":"First of all, internal systems can’t be accessed through other TruBudget instances/ nodes. Data can be accessed directly through the multichain-cli available on TruBudget’s node instance or through TruBudget’s API. Direct access to a node should be restricted by the organization itself. Access using the routes of TruBudget’s API is protected by user authorization through JSON Web Tokens. There are 3 different secrets which an organization must provide to setup a new node: RPC_PASSWORD: Additionally, an API can only connect to a node in the network knowing the right RPC_PASSWORD which is set by the first node (master node) of the blockchain network.ORGANIZATION_VAULT_SECRET: Every node belongs to an organization which has its own stream on the multichain. The data in this stream can only be accessed through the node which belongs to this organization using the ORGANIZATION_VAULT_SECRET. This secret is shared between all nodes of one organization.ROOT_SECRET: The root secret is the password for the root user. If you start with an empty block-chain, the root user is needed e.g. to add other users or approve new nodes. "},{"title":"Is TruBudget suitable for large-scale deployment? Is it scalable?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#is-trubudget-suitable-for-large-scale-deployment-is-it-scalable","content":"TruBudget scales horizontally and is therefore easily scalable by adding multiple instances. "},{"title":"How are latency, optimization and QOS issues taken into account in TruBudget?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#how-are-latency-optimization-and-qos-issues-taken-into-account-in-trubudget","content":"TruBudget uses in-memory caching strategies in order to ensure low latency for read operations. "},{"title":"How are Fork problems managed at TruBudget level?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#how-are-fork-problems-managed-at-trubudget-level","content":"The longer chain wins: Transactions in the shorter branch re-enter the memory pool of nodes, which leaves them in the regular situation of waiting for confirmation, but being visible to all nodes. The only exception is if some of those transactions conflict with transactions which are already confirmed on the longer branch, or already in the memory pool, in which case they are discarded. "},{"title":"Why the choice of Round Rip consensus for TruBudget?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#why-the-choice-of-round-rip-consensus-for-trubudget","content":"In private/permission-less networks there is no need for Proof-of-Work algorithms. Round robin allows high throughput with acceptable security. The consensus algorithm can be configured if required. "},{"title":"What is the number of transactions per second allowed in TruBudget?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#what-is-the-number-of-transactions-per-second-allowed-in-trubudget","content":"The bottleneck of TruBudget is Multichain. The number of transactions per second are depending on the hardware. On standard hardware TruBudget can allow 2000 transactions per second. "},{"title":"As the size of the blockchain may change over time, can we not fear a risk of TruBudget malfunctioning?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#as-the-size-of-the-blockchain-may-change-over-time-can-we-not-fear-a-risk-of-trubudget-malfunctioning","content":"Data-volume stored on the chain is very small. On system with large disks, TruBudget can run for a very long time. As example: the provisioning of TruBudget available in the github repository of TruBudget is generating test data which currently includes 7 users and 4 projects on one node. After provisioning a fresh installed TruBudget chain is completed the chain size increases by 2MB. In case that disk usage exceeds disk capacity TruBudget could fulfil time-based partitioning where old data is archived and current/new data is transferred to a new TruBudget instance. "},{"title":"Apart from the security aspects inherent to the Blockchain such as transparency, traceability, integrity, what are the security mechanisms or protocols implemented in TruBudget? From the frontend to the back end?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#apart-from-the-security-aspects-inherent-to-the-blockchain-such-as-transparency-traceability-integrity-what-are-the-security-mechanisms-or-protocols-implemented-in-trubudget-from-the-frontend-to-the-back-end","content":"Communication between Frontend and API is encrypted using TLS and restricted to authenticated and authorized users. The API validates requests and enforces role-base-access rights for every resource. Access from the API to the chain is encrypted using TLS and secured using a shared secret. Communication between blockchain nodes is done using TCP and has to be secured using VPN. "},{"title":"Generally, in the design and development of Blockchain solutions, regulatory requirements (privacy requirements such as data confidentiality, right to forget and deletion of data) and compliance requirements can be integrated. What about TruBudget? Since the different nodes are not subject to the same regulations, how is this taken into account in TruBudget?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#generally-in-the-design-and-development-of-blockchain-solutions-regulatory-requirements-privacy-requirements-such-as-data-confidentiality-right-to-forget-and-deletion-of-data-and-compliance-requirements-can-be-integrated-what-about-trubudget-since-the-different-nodes-are-not-subject-to-the-same-regulations-how-is-this-taken-into-account-in-trubudget","content":"TruBudget is designed to be as generic as possible which means that no restrictions shall be forced where it isn’t needed. However, since data can’t be removed from the blockchain, users should be drawn attention to not enter personal data which is stored on-chain. That regards only the choice of user names, name of projects, sub-projects and workflow-items. Currently emails typed into a user’s profile and documents are not saved on-chain and may therefore contain personal data if required and permitted according to respective regulations. Emails are saved in a local database and not replicated through the blockchain therefor they can be deleted if required. For saving documents multichain’s off-chain-storage is used which means documents are shared but can technically be deleted. "},{"title":"Updating the TruBudget version of the blockchain (connected nodes) implies updating TruBudget on the individual nodes. What mechanism is provided so that this update is effective on all nodes simultaneously so that there are no different versions of TruBudget on the servers?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#updating-the-trubudget-version-of-the-blockchain-connected-nodes-implies-updating-trubudget-on-the-individual-nodes-what-mechanism-is-provided-so-that-this-update-is-effective-on-all-nodes-simultaneously-so-that-there-are-no-different-versions-of-trubudget-on-the-servers","content":"TruBudget versions are backwards compatible, which means different versions of TruBudget can run in the same network. There are strategies in place for breaking versions which will automatically enforce nodes with older versions to update to a newer version. "},{"title":"The params.dat configuration file containing all the multichain TruBudget configuration. What protection measures are implemented to prevent the multichain parameters and permissions contained in this file from being modified for malicious purposes?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#the-paramsdat-configuration-file-containing-all-the-multichain-trubudget-configuration-what-protection-measures-are-implemented-to-prevent-the-multichain-parameters-and-permissions-contained-in-this-file-from-being-modified-for-malicious-purposes","content":"Access to production infrastructure needs to be secured by the operation team. The security relevant configurations like consensus requirements can’t be changed after the first block was mined. "},{"title":"How secure is TruBudget against malicious attacks? Has TruBudget been penetration tested?","type":1,"pageTitle":"Security @ TruBudget","url":"docs/operation-administration/security#how-secure-is-trubudget-against-malicious-attacks-has-trubudget-been-penetration-tested","content":"TruBudget has been penetration tested using the OWASP Zed Attack Proxy (ZAP), which is a very popular open-source penetration testing tool maintained under the umbrella of the Open Web Application Security Project (OWASP). Our system underwent analysis and attacks from simulated malicious attackers. The tool acted as a “man-in-the-middle proxy” between the browser and the web application and tested if the application is vulnerable to attacks such as SQL Injection, Cross-Site Scripting, Path Traversal, Format String errors and many others. The results of the tests helped us discover vulnerabilities and allowed us to improve the security of the applicaiton and strengthen our defenses against such attacks, by implementing different security measures, checks and validations. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/README","content":"Getting Started Welcome to the TruBudget documentation! This guide aims to provide you with information about the different parts of TruBudget. 💡 If you want to know more about TrueBudged visit click here⚡️ For the latest release, the Getting Started section or the FAQ visit our initial README.md Introduction - Some basics of TruBudget Installation - How to install TruBudget Bare Metal Installation - installation without DockerDeploying using DockerEnvironment VariablesOrganizations and NodesStarting a new networkConnect to an existing networkUpdate TruBudgetLogging - Informations on the API log and how to handle itSecurity - Information on the security aspects of TrubudgetTroubleshooting - How to solve known issues Contributing Developer SetupLogging - Informations on the API log and how to handle itTroubleshooting - How to solve known issues User Guide Projects/Subprojects/WorkflowitemsUsers and GroupsNetworkBackupNotificationsPermissions FAQ - Frequently asked questions","keywords":""},{"title":"Example Use Cases","type":0,"sectionRef":"#","url":"docs/usecases","content":"Example Use Cases Please refer to following videos to get an overview of Trubudget, and motivation behind its development. Short overviewIn depth talk about TruBudget at OpenSlava 2019 by Dr. Jure Zakotnik","keywords":""},{"title":"Backup","type":0,"sectionRef":"#","url":"docs/user-guide/backup","content":"","keywords":""},{"title":"Create a Backup","type":1,"pageTitle":"Backup","url":"docs/user-guide/backup#create-a-backup","content":"Description: These section describes how to create a gzip file which contains the current blockchain state. Instructions: Login into the frontend using the root userClick the button in the upper left corner to open the side-navigation-barClick on the Download Button to create a backup of the current blockchain stateOnce the backup.gz file is downloaded you can rename it to whatever name you want  note Only the root user is allowed to restore backups of blockchain states.The RPC_PASSWORD of the Blockchain Backup needs to be equal to the password that is currently in use. "},{"title":"Restore a Backup","type":1,"pageTitle":"Backup","url":"docs/user-guide/backup#restore-a-backup","content":"Description: These section describes how to restore a blockchain state with an backup file created/downloaded before. Instructions: Login into the frontend using the root userClick the button in the upper left corner to open the side-navigation-barClick on the Restore ButtonSelect the backup that you want to restoreWhen the backup is successfully restored you will be logged out You are now able to login with whatever user you want and should see the projects &amp; subprojects from your backup.  note Only the root user is allowed to restore backups of blockchain states.The RPC_PASSWORD of the Blockchain Backup needs to be equal to the password that is currently in use.During restoring errors might pop up in the frontend of other users connectedAfter successfully restored the blockchain state, the user is logged out. "},{"title":"Excel Export","type":0,"sectionRef":"#","url":"docs/user-guide/excel-export","content":"","keywords":""},{"title":"Exporting Data","type":1,"pageTitle":"Excel Export","url":"docs/user-guide/excel-export#exporting-data","content":"To export the TruBudget data: Click on the hamburger menu on the top left corner to open the side menuSelect &quot;Export&quot; - the Excel file containing the TruBudget data is automatically downloaded and saved to your local drive  note The status page shows if the export feature is enabled and connected "},{"title":"Confirmation","type":0,"sectionRef":"#","url":"docs/user-guide/confirmation","content":"","keywords":""},{"title":"Supported intents","type":1,"pageTitle":"Confirmation","url":"docs/user-guide/confirmation#supported-intents","content":"Following intents needs confirmation before they can be executed: project.assignproject.intent.grantproject.intent.revokesubproject.assignsubproject.intent.grantsubproject.intent.revokeworkflowitem.assignworkflowitem.intent.revokeworkflowitem.intent.grant "},{"title":"Automatically grant view permissions","type":1,"pageTitle":"Confirmation","url":"docs/user-guide/confirmation#automatically-grant-view-permissions","content":"Trubudget has a complex permission system which often leads to misunderstandings when things are disabled because of missing permissions. The confirmation dialog shall help avoiding misunderstandings by granting required permissions automatically. If a confirmation is required, view permission checks are made to find out if the user involved needs additional permissions to view the item. In case of assigning a user it only make sense to assign a user if he/she can see the item he/she is assigned to. Note that revoking permissions never grant/revoke additional permissions. "},{"title":"Confirmation Dialog","type":1,"pageTitle":"Confirmation","url":"docs/user-guide/confirmation#confirmation-dialog","content":"A confirmation dialog can look differently depending on the permissions of users included in the process. These section describes all possible confirmation dialogs. Dialog without actions# If the user has all required permissions and no additional actions have to be executed following dialog appears.  Dialog with actions list# If the user has all required permissions and additional actions have to be executed following dialog appears.  Dialog without view permissions# If the user misses view permissions on any resource involved following dialog appears.  Dialog without grant permissions# If the user misses grant permissions on any resource involved in all viewed additional actions following dialog appears.  "},{"title":"Nodes","type":0,"sectionRef":"#","url":"docs/user-guide/network/nodes","content":"","keywords":""},{"title":"View Nodes","type":1,"pageTitle":"Nodes","url":"docs/user-guide/network/nodes#view-nodes","content":"Description: In the top cards &quot;New Organizations&quot; and &quot;New nodes for existing organizations&quot; organizations or nodes waiting for approval are shown. If a request is not going to be approved it can be declined and will disappear from the list. The main table shows all organizations and nodes of the current network. In the &quot;Approved&quot; tab a list of nodes that were approved and added to the network is displayed. Each organization has one entry in the list, showing the number of nodes the organization has and which access the nodes have. Each table entry can be expanded in order to view more information regarding each node in the organization. Each node has a specific address, a connection status that shows if the node is still connected to the network and a timestamp that is updated every 24h specifying when the node was last seen. The second tab shows the nodes that were declined by the current organization while also mentioning what organizations declined the node. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Nodes&quot; menu point  Click the buttons to &quot;approve&quot; or &quot;decline&quot; requests On the &quot;Approved&quot; tab, click the arrow icon to expand the row and see more details about the organization's nodes  On the &quot;Declined&quot; tab, see the nodes declined by your organization. It is also visible what other organizations also declined the nodes.  "},{"title":"Notifications","type":0,"sectionRef":"#","url":"docs/user-guide/notifications","content":"","keywords":""},{"title":"View current notifications","type":1,"pageTitle":"Notifications","url":"docs/user-guide/notifications#view-current-notifications","content":"Description: View all notifications the current user has. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Notifications&quot; menu point  note An alternative way to view all notifications is to click the chat-bubble-button in the upper right corner.Clicking on a notification will mark it as readClicking on the &quot;READ ALL&quot;-Button mark all notifications currently shown.Clicking on the magnifier icon opens the site where the change has happenedIf the current user has no permissions to view the changed item the information &quot;No permissions to see further details&quot; will be shown next to the notification message "},{"title":"Project","type":0,"sectionRef":"#","url":"docs/user-guide/projects/project","content":"","keywords":""},{"title":"View projects","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#view-projects","content":"Description: View all projects where the current user has view-permissions on. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu point  note An alternative way to view the projects site is to click on the Main Button in the upper left corner.To view the project's details take a look at the View project details section below. "},{"title":"Filter projects","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#filter-projects","content":"Description: There are 3 ways how projects can be filtered on the overview page: SearchbarTag-ButtonURL The Searchbar can be used to search all projects for a term included in name, tag or status. These can also be used as prefixes to specify the search context (e.g. tag:mycustomtag). If no prefix is used display name, tag and status are searched for a match. After typing the project list and the URL are updated instantly. The URL can then be shared to other users including the filter. The Tag-Button can be clicked to only show projects including the clicked tag. The URL supports query parameters which are updated instantly when typing search terms into the searchbar. Instructions: Navigate to the overview pageClick the &quot;Quick Search&quot; button on the top rightAfter the search bar appears, type in the term by which you want to filter the projectsThe projects are now filtered by your search termIf you want to clear the search field, click on the &quot;X&quot; button next to the text note Use prefixes to search specific attributes. Available Prefixes: tag, name, statusThe filter options can be easily shared by copying the link after typing in the search terms into the searchbar. "},{"title":"View project details","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#view-project-details","content":"Description: View details like budget distribution or task status of a project. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a project  note The project.viewDetails permission does not permit to view any subproject. "},{"title":"Create a project","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#create-a-project","content":"Description: Create a new project defining title, comment and budgets. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the '+' icon in the middle of the grey card next to the other projects if there are any  Fill in the required fields: &quot;Project Title&quot;: Title of the project&quot;Comment&quot;: A little description or comment refering to the project&quot;Organization&quot;: Organization that the budget belongs to&quot;Currency&quot;: The currency of the organization's budget&quot;Amount&quot;: The amount of the organization's budget Add the budget of the organization by clicking the &quot;+&quot; symbolAfter this, the entered budget will appear on the screen Change the thumbnail to a picture that fits best for your project Click the &quot;Submit&quot;-button to create a new project. note The root user may not create projects.Do not forget to permit other users to view/edit the newly created project.You have to add at least one budget before you can submit the project.To add a budget, the &quot;+&quot; button needs to be pressed. Only budgets that appear above the text field are saved to the blockchain. "},{"title":"Update a project","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#update-a-project","content":"Description: Update details like title, currency, comment or budget amount of a project. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the pen icon in the bottom right corner of a project  Fill in the fields that shall be updated: &quot;Project Title&quot;: Title of the project&quot;Comment&quot;: A little description or comment refering to the project&quot;Currency&quot;: Currency of the project&quot;Project budget amount&quot;: Assigned budget to the project Change the thumbnail to a picture that fits best for your project Click the &quot;Submit&quot;-button to update the project. note The pen icon can only be viewed if the current user has update permissions.The pen icon disappear if the project is closed "},{"title":"Assign an User/Group to a project","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#assign-an-usergroup-to-a-project","content":"Description: Assign a User or Group to a project to show which User or Group is responsible for it. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the assignee dropdown field to open a selectionSelect and click on an user or group to open a confirmation dialogIn case the assigner has no project view permissions the user or group cannot be assignedConfirming the dialog first executes all additional actions listed if there are any, then assigns the userIf no addtional permissions have to be granted the user or group is assigned  note Assigning a user/group needs project view permissions.If the assignee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they can be granted if the assigner has grant permissions. (see confirmation for more Details) "},{"title":"Close project","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#close-project","content":"Description: Close a project when all subprojects are closed. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the done-button next to the status section to close the current project note A project can only be closed if all subprojects are closed and the user has the project.close permission. "},{"title":"View the history of a project","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#view-the-history-of-a-project","content":"Description: The history contains all activities done directly refer to the current project. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey button below the '+' button on the right to open the right sidebar viewing the history of the current project.  note The history of actions refer to workflowitems can only be viewed by the history of a certain subproject "},{"title":"Filter the history of a project","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#filter-the-history-of-a-project","content":"Description: The entries in the history can be filtered by 4 different values: publisher, type of event, a start date and an end date, where a timeframe can be determined. By clicking the search button, all values that are specified are used in the filter request. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey button below the '+' button on the right to open the right sidebar viewing the history of the current projectClick on the top of the sidebar to open the expandable filter area  "},{"title":"Project tags","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#project-tags","content":"Instructions: Click the button to add a new or edit an existing projectType the tag name in the &quot;Tag&quot; fieldHit the &quot;Enter&quot; key or click the &quot;Add&quot; button next to the input fieldThe tag is now visible below the input field[OPTIONAL] Hover click the &quot;X&quot; symbol next to the tag name to remove the tagClick &quot;Submit&quot; to save the tags to the projectThe tags are now visible on the overview page on the corresponding project card or on the project details page note Starting with v1.3.0, projects can have tags to add additional data to them, group them and make them searchable.Tags can be added when creating or editing the project, either via the UI or the API.Tags should not contain whitespaces or any special characters except &quot;_&quot;, &quot;.&quot; or &quot;-&quot;.Tags can contain alphanumeric characters and can be up to 15 characters.Tags cannot not start or end with the special characters listed aboveTag-Buttons in the project list of the overview page can filter projects by tag "},{"title":"Permissions on project","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#permissions-on-project","content":""},{"title":"Create a subproject","type":1,"pageTitle":"Project","url":"docs/user-guide/projects/project#create-a-subproject","content":""},{"title":"Subproject","type":0,"sectionRef":"#","url":"docs/user-guide/projects/subproject","content":"","keywords":""},{"title":"View subprojects","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#view-subprojects","content":"Description: View all subprojects where the current user has view-permissions on. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a project  At the bottom half of the site all subprojects of the current project are viewed note To view the subproject's details take a look at the View subproject details section below. "},{"title":"Filter subprojects","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#filter-subprojects","content":"Description: There are 2 ways how subprojects can be filtered: SearchbarURL The Searchbar can be used to search all projects for a term included in name, tag or status. These can also be used as prefixes to specify the search context (e.g. tag:mycustomtag). If no prefix is used display name, tag and status are searched for a match. After typing the project list and the URL are updated instantly. The URL can then be shared to other users including the filter. The URL supports query parameters which are updated instantly when typing search terms into the searchbar. Instructions: Navigate to a projectOn the left side you can see the searchbarType in the term by which you want to filter the projectsThe subprojects are now filtered by your search term note Use prefixes to search specific attributes. Available Prefixes: tag, name, statusThe filter options can be easily shared by copying the link after typing in the search terms into the searchbar. "},{"title":"View subproject details","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#view-subproject-details","content":"Description: View details like budget distribution or task status of a subproject. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to view  note The subproject.viewDetails permission does not permit to view any workflowitem. "},{"title":"Create a subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#create-a-subproject","content":"Description: Create a new subproject defining title, comment, currency, budget, validator and workflowitem type. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the '+' button on the right to open the creation dialog  Fill in the required fields: &quot;Subproject Title&quot;: Title of the subproject&quot;Comment&quot;: A little description or comment refering to the subproject&quot;Organization&quot;: Organization that the budget belongs to&quot;Currency&quot;: The currency of the organization's budget[Optional]&quot;Validator&quot;: Select a user identity Defines the default assignee of each workflowitem created in this subprojectDefines the only user who is allowed to close workflowitems in this subproject [Optional]&quot;Workflowitem type&quot;: Select a type which should be applied to all workflowitems in thios subproject. Workflowitems behave differently according to their type. general: A workflowitem of type general will be createdrestricted: When assigning a restricted workflowitem permissions are automatically granted and revoked. The assigner will only keep the view permissions. Add the projected budget of the organization by clicking the &quot;+&quot; symbol After this, the entered budget will appear on the screen Click the &quot;Submit&quot;-button to create a new subproject. note The root user may not create subprojects.Do not forget to permit other users to view/edit the newly created subproject.You have to add at least one budget before you can submit the project.To add a budget, the &quot;+&quot; button needs to be pressed. Only budgets that appear above the text field are saved to the blockchain.The validator is an optional fieldThe workflowitem type is an optional field "},{"title":"Update a subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#update-a-subproject","content":"Description: Update details like budget amount or title of a subproject. Instructions: Click the button in the upper left corner to open the side-navigation-bar Click the &quot;Projects&quot; menu point Click the blue magnifier icon in the bottom right corner of a project Click the pen icon next to the status of the subproject which shall be updated Fill in the fields that shall be updated: &quot;Subproject Title&quot;: Title of the subproject&quot;Comment&quot;: A little description or comment refering to the subproject&quot;Currency&quot;: Currency of the subproject Click the &quot;Submit&quot;-button to update the subproject. note The pen icon can only be viewed if the current user has update permissions.The pen icon disappear if the subproject is closedUpdating the workflowitem type is not possibleUpdating the validator is not possible "},{"title":"Assign an User/Group to a subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#assign-an-usergroup-to-a-subproject","content":"Description: Assign a User or Group to a subproject to show which User or Group is responsible for it. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the assignee dropdown field to open a selectionSelect and click on an user or group to open a confirmation dialogIn case the assigner has no project view permissions the user or group cannot be assignedConfirming the dialog first executes all additional actions listed if there are any, then assigns the userIf no addtional permissions have to be granted the user or group is assigned  note Assigning a user/group needs project and subproject view permissions.If the assignee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they can be granted if the assigner has grant permissions. (see confirmation for more Details) "},{"title":"Close subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#close-subproject","content":"Description: Close a subproject when all workflowitems are closed. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the done-button next to the status section to close the current subproject note A subproject can only be closed if all workflowitems are closed and the user has the subprojectproject.close permission. "},{"title":"View the history of a subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#view-the-history-of-a-subproject","content":"Description: The history contains all activities done and directly refer to the current subproject. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the grey button below the '+' button on te right to open the right sidebar viewing the history of the current subproject.  note The history of actions refer to workflowitems are also viewed. "},{"title":"Filter the history of a subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#filter-the-history-of-a-subproject","content":"Description: The entries in the history can be filtered by 4 different values: publisher, type of event, a start date and a end date, where a timeframe can be determined. By clicking the search button, all values that are specified are used in the filter request. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the grey button below the '+' button on te right to open the right sidebar viewing the history of the current subprojectClick on the top of the sidebar to open the expandable filter area  "},{"title":"View the additional data of a subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#view-the-additional-data-of-a-subproject","content":"Description: The additional data is a free field that can be used to extend the subproject data beyond the visible information like display name and budget. To view this data, an additional button was added that opens a window containing the data of this field. Instructions: Click the &quot;...&quot; button on the right side of the subprojectA window appears containing the additional information on the subprojectClose the window by clicking &quot;close&quot;  note There is no logic to format the data. "},{"title":"Permissions on subproject","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#permissions-on-subproject","content":""},{"title":"Create a workflowitem","type":1,"pageTitle":"Subproject","url":"docs/user-guide/projects/subproject#create-a-workflowitem","content":""},{"title":"Workflowitems","type":0,"sectionRef":"#","url":"docs/user-guide/projects/workflowitem","content":"","keywords":""},{"title":"View workflowitems","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#view-workflowitems","content":"Description: View all workflowitems of the current subproject. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewAt the bottom half of the site all workflowitems of the current subproject are viewed. note Workflowitems are viewed as redacted if the user has no permission to view it. "},{"title":"View workflowitem details","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#view-workflowitem-details","content":"Description: View details like budget or task status of a subproject. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subprojectClick the info icon on the left side of the workflowitem's title to open the info dialog  [Optional] Click the &quot;validate&quot;-button to select a document which should be compared with the uploaded one.[Optional] Depending on the document validation the validate icon shows &quot;OK&quot; or &quot;NOT OK&quot; note Most of the details are shown in the workflowitems-list on the subprojects overview.It is possible to validate if an uploaded document is the same the user has locally. "},{"title":"Create a workflowitem","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#create-a-workflowitem","content":"Description: Create a new workflowitem defining title, comment, currency and budget. It is also possible to attach documents to the workflowitem. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the '+' button on the right to open the creation dialog  Fill in the required fields: Workflowitem type: Workflowitems behave differently according to their type general: A workflowitem of type general will be createdrestricted: When assigning a restricted workflowitem permissions are automatically granted and revoked. The assigner will only keep the view permissions. &quot;Workflow Title&quot;: Title of the workflowitem&quot;Comment&quot;: A little description or comment refering to the workflowitemBudget: Not applicable: The workflowitem does not affect the budget of the subprojectallocated: The workflowitem will affect the budget of the subproject but the budget is not disbursed yetdisbursed: The workflowitem affect the budget of the subproject &quot;Currency&quot;: Currency of the workflowitem&quot;Workflow budget amount&quot;: Assigned budget to the workflowitem  [Optional] Click the &quot;Next&quot;-button to switch to the next dialog where documents can be uploaded[Optional] Fill in the required fields: &quot;Document Name&quot;: A unique name of the document [Optional] Click the &quot;Upload&quot;-button to open the file selector.  [Optional] Select the document which should be uploaded[Optional] All documents can now be seen above the input fieldClick the &quot;Submit&quot;-button to create a new workflowitem note The root user may not create workflowitems.Do not forget to permit other users to view/edit the newly created workflowitem.It is possible to add more than one documents to a workflowitem.It is not possible to remove/delete documents. "},{"title":"Update a workflowitem","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#update-a-workflowitem","content":"Description: Update details like title, comment, currency and budget of a workflowitem. It is also possible to attach documents to the workflowitem. Instructions: Click the button in the upper left corner to open the side-navigation-bar Click the &quot;Projects&quot; menu point Click the blue magnifier icon in the bottom right corner of a project Click the grey magnifier icon on the most right of the subproject you want to view Click the pen icon next to the assignee field of the worklfowitem which shall be updated Fill in the fields that shall be updated: &quot;Workflow Title&quot;: Title of the workflowitem&quot;Comment&quot;: A little description or comment refering to the workflowitemBudget: Not applicable: The workflowitem does not affect the budget of the subprojectallocated: The workflowitem will affect the budget of the subproject but the budget is not disbursed yetdisbursed: The workflowitem affect the budget of the subproject &quot;Currency&quot;: Currency of the workflowitem&quot;Workflow budget amount&quot;: Assigned budget to the workflowitem [Optional] Click the &quot;Next&quot;-button to switch to the next dialog where documents can be uploaded [Optional] Fill in the required fields: &quot;Document Name&quot;: A unique name of the document [Optional] Click the &quot;Upload&quot;-button to open thge file selector. [Optional] Select the document which should be uploaded [Optional] All documents can now be seen above the input field Click the &quot;Submit&quot;-button to update the workflowitem note The pen icon can only be viewed if the current user has update permissions.The pen icon disappear if the workflowitem is closedIt is not possible to remove/delete documents. "},{"title":"Update multiple workflowitems","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#update-multiple-workflowitems","content":"Description: Update assignee or workflowitem-permissions for multiple workflowitems at once. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the &quot;Edit&quot;-button on the left above the workflowitems-list to switch into &quot;Edit&quot;-mode  Select the workflowitems which should be edited by checking the checkboxes to the left of each workflowitemBy selecting one or more workflowitems a side menu opens to the right[Optional] Click the assignee dropdown field to open a selection where the right user or group can be selected[Optional] Click on one permission dropdown field to open a selection where the right user or group can be selectedClick the &quot;Update&quot;-button at the top of the side menu to open a preview of all actions the update will trigger. Actions are differientiated between &quot;possible&quot; and &quot;not possible&quot; actions. &quot;Not possible&quot; actions are assign intents on closed workflowitems only.  Click on &quot;Submit&quot; to start the update process, which can be followed by the preview  Click on &quot;Done&quot; to close the dialog and exit &quot;edit&quot;-mode note Only assignee or permissions can be updated at once.Permissions of identities that are not selected except the one of the current user are revoked during the process&quot;Not possible&quot; actions are assign intents on closed workflowitems only. "},{"title":"Assign an User/Group to a workflowitem","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#assign-an-usergroup-to-a-workflowitem","content":"Description: Assign a User or Group to a workflowitem to show which User or Group is responsible for it. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the assignee dropdown field of a workflowitem in the bottom list to open a selectionSelect and click on an user or group to open a confirmation dialogIn case the assigner has no project view permissions the user or group cannot be assignedConfirming the dialog first executes all additional actions listed if there are any, then assigns the userIf no addtional permissions have to be granted the user or group is assigned  note Assigning a user/group needs project, subproject and workflowitem view permissions.If the assignee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they can be granted if the assigner has grant permissions. (see confirmation for more Details) "},{"title":"Close workflowitem","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#close-workflowitem","content":"Description: Close a workflowitem when the work is done. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subprojectClick the done-button on the most right of the workflowitem you want to close  note Workflowitems can only be closed one after eachother.A workflowitem can only be closed if the user is assigned. ::: View and filter the history of a workflowitem# Description: The history for each workflowitem can be found in its details dialog. The history contains a chronological list of changes of the selected workflowitem, starting with the newest. The entries in the history can be filtered by 4 different values: publisher, type of event, a start date and a end date, where a timeframe can be determined. By clicking the search button, all values that are specified are used in the filter request. Instructions: Click on the &quot;i&quot; (information) button of the workflowitem to view the workflowitem detailsNavigate to the &quot;History&quot; tabYou can now view the history of the selected workflowitemTo filter the history events, click on the expandable filter area and set the filter options Reorder Workflowitems# Description: If workflowitems are not closed or redacted( user has no view permission) the user can reorder them. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subprojectClick the &quot;edit&quot;-button on the left above the workflowitems-list to switch into &quot;edit&quot;-mode Click and pull a workflowitem to the new position in the workflowitem queueWhen finished reordering submit the change and exit &quot;edit&quot;-mode with a click on the &quot;done&quot;-icon at the same position the &quot;edit&quot; button has been before. If one or more workflowitems between the workflowitems the user want to reorder are redacted the user is not able to reorder.Do not forget to submit the new order with a click on the &quot;done&quot;-icon above the workflowitems-listIn &quot;edit&quot;-mode it is not possible to click a button located on a workflowitemIn &quot;edit&quot;-mode workflowitems are selectable in order to update more than one workflowitem at the same time ::: "},{"title":"Documents in TruBudget","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#documents-in-trubudget","content":"Description: TruBudget features upload/download and validation of documents. If a file (like a contract, invoice, etc.) is part of the general workflow of a subproject, the document can be added to a workflowitem and later be downloaded or validated by another user. Before Trubudget-v1.10.0 a document is not uploaded itself - instead only a computed fingerprint is stored on the blockchain. When another user validates the document, the fingerprint of his/her copy is calculated and compared to the original. Since Trubdget-v1.10.0 a documents can be uploaded and downloaded. "},{"title":"Add document to workflowitem","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#add-document-to-workflowitem","content":"Adding a document to a workflowitem can be done either when adding or when creating the document, in the second screen. Either create a new workflowitem or update an existing workflowitemAfter filling out the fields on the first page, click the &quot;Next&quot; buttonIn the second screen, enter a name for the document. This name does not have to be the same as the filename! The name should be descriptive of the document that is being uploaded, e.g. &quot;Invoice-Contractor&quot; or &quot;Contract-School&quot;. After typing a name, the button &quot;Upload&quot; gets activatedClick the &quot;Upload&quot; button and select a file from your deviceClick the &quot;Submit&quot; button to finish "},{"title":"Download document from workflowitem (Since Trubudget-v1.10.0)","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#download-document-from-workflowitem-since-trubudget-v1100","content":"Click on the &quot;i&quot; (information) button of the workflowitem containing the document to view the workflowitem detailsNavigate to the &quot;Documents&quot; tabIf you see the desired document, click the &quot;Download&quot; button "},{"title":"Validate a document","type":1,"pageTitle":"Workflowitems","url":"docs/user-guide/projects/workflowitem#validate-a-document","content":"Click on the &quot;i&quot; (information) button of the workflowitem containing the document to view the workflowitem detailsNavigate to the &quot;Documents&quot; tabIf you see the desired document, click the &quot;Validate&quot; buttonSelect the correct document from your driveIf the documents match, the validation says &quot;OK&quot;[Optional] If the documents do not match, the label changes to &quot;NOT OK&quot;. Click on the &quot;NOT OK&quot; button and choose another document to try again. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/user-guide/README","content":"","keywords":""},{"title":"Users/Groups","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#usersgroups","content":"Learn how to create Users/Groups and how or when they are notified. UserGroupNotifications "},{"title":"Permissions","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#permissions","content":"Learn which permissions exist in Trubudget and how to grant/revoke them. Permissions "},{"title":"Projects","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#projects","content":"Learn how to create and work with projects and their components. ProjectSubprojectWorkflow "},{"title":"Network","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#network","content":"Learn how to approve other organizations or nodes to expand your Trubudget network. Nodes "},{"title":"Backups","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#backups","content":"Learn how to download or upload a backup of the current data (multichain instance) as a root user. Backup "},{"title":"Versions and Service-Status","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#versions-and-service-status","content":"Learn where to find the versions and connection quality of all Trubudget components Service-Status "},{"title":"FAQ","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#faq","content":""},{"title":"How can I change the default project background images?","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#how-can-i-change-the-default-project-background-images","content":"Changing these images is only possible by replacing the Thumbnail_*.jpg files in the frontend/public folder. Notes: Changes are only applied after restarting the frontend. Filenames Thumbnail_0001.jpg - Thumbnail_0024.jpg have to stay the same.Thumbnail_0025.jpg and above are ignored. "},{"title":"Where to find the used illustration images for the empty fields or tables?","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#where-to-find-the-used-illustration-images-for-the-empty-fields-or-tables","content":"The source of illustration images is unDraw with color code #53BBFE selected "},{"title":"What should I do if I get an error when I try to restore a backup?","type":1,"pageTitle":"Introduction","url":"docs/user-guide/README#what-should-i-do-if-i-get-an-error-when-i-try-to-restore-a-backup","content":"This might happen because the backup.gz file you are trying to restore contains an invalid hash. If the error that occurs is &quot;Failed to restore backup: Not a valid TruBudget backup&quot; and it looks similar to the picture below, there is a script that can fix the hash. However, only use it if you are certain that your backup is a valid TruBudget backup.  To run the script please follow the instructions below: Navigate to the /blockchain folder and open your favorite shellType npm run check_backup and add the path to the backup.gz file you want to fix (e.g. npm run check_backup -- &quot;path/to/backup.gz&quot;)The script will print out the result of the check which tells you if the backup is valid or not.Optionally, type -f/--fix after the path. This option will also fix the hash if it is invalid. A new file backup updated.gz will be created in the same location as the one you provided. It is an exact copy of your backup, but with a corrected hashYou can now use this file to restore your backup Note that if your filename contains a blank space (e.g. backup (1).gz), you should use quotation marks when entering the path, so it will be recognized as one argument and not two separate ones. "},{"title":"Service-Status","type":0,"sectionRef":"#","url":"docs/user-guide/status/status","content":"","keywords":""},{"title":"Service-Status and Versions","type":1,"pageTitle":"Service-Status","url":"docs/user-guide/status/status#service-status-and-versions","content":"The core/mandatory Trubudget set consists of 4 different components (Frontend, API, Blockchain, Multichain). Trubudget also offers a set of optional services (e.g. Email-notification, excel-export). All of these services have their own version which can be viewed on the status page in the frontend. "},{"title":"View all Status and Version Info","type":1,"pageTitle":"Service-Status","url":"docs/user-guide/status/status#view-all-status-and-version-info","content":"Description: These section describes how to view the status of all components of Trubudget. note Every component has its own versionThe api version shows the version of the api where the frontend is connected to.The blockchain version shows the version of the blockchain where the master api is connected to. Instructions: Login into the frontendClick the button in the upper left corner to open the side-navigation-barClick &quot;Service-Status&quot;-button to open the status page  "},{"title":"Ping Evaluation","type":1,"pageTitle":"Service-Status","url":"docs/user-guide/status/status#ping-evaluation","content":"Description: This section describes how the different pings are calculated: Service/Component\tPing Calculation Descriptionfrontend\tThe ping to the frontend would be a normal internet speed test and is not shown in Trubudget api\tThe ping is calculated from frontend to api blockchain\tThe ping is calculated from api to blockchain multichain\tThe ping is calculated from api to multichain email-service [optional]\tThe ping is calculated from frontend to email-service export-service [optional]\tThe ping is calculated from frontend to export-service "},{"title":"Group","type":0,"sectionRef":"#","url":"docs/user-guide/users-and-groups/group","content":"","keywords":""},{"title":"View Current Groups","type":1,"pageTitle":"Group","url":"docs/user-guide/users-and-groups/group#view-current-groups","content":"Description: View all groups the current user is member of. Instructions: Click the button in the upper left corner to open the side-navigation-barThe user's groups are displayed in the &quot;Groups&quot; section of the side-navigation-bar  note If a user is added to a group recently, this user can view the group after next login not only by refreshing the page. "},{"title":"View All Groups","type":1,"pageTitle":"Group","url":"docs/user-guide/users-and-groups/group#view-all-groups","content":"Description: View all groups. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Users&quot; menu point  note The list of available groups can only be viewed by administrators Click the &quot;Groups&quot; tab on the Users page to display all available groups  "},{"title":"Create a Group","type":1,"pageTitle":"Group","url":"docs/user-guide/users-and-groups/group#create-a-group","content":"Description: Create a new group. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Users&quot; menu pointClick the &quot;Groups&quot; tab on the Users page to display all available groups  Click the blue &quot;+&quot; button on the right to open the &quot;Add Group&quot; dialogFill in the required fields: &quot;ID&quot;: ID of the group has to be unique&quot;Name&quot;: Name of group Type the user's ID into the field at the bottom of the dialog. After one or more characters are entered, a dropdown menu with suggested users will appear. Click the user in the dropdown to instantly add the user to the group. Note that the dropdown lists max. 6 user-suggestions - if the user you want to add is not visible in the dropdown, please enter more characters to search for the user. To remove any of the users that were already added, click the &quot;X&quot; next to the user's ID. Once a group is created you can grant and revoke administrator permissions for the group, more details can be found at admin-permissions. note To create a new group, at least one user needs to be added.It is not possible to create a group of groups.A group cannot be deleted, but can be edited such that no user belongs to the group anymore. "},{"title":"Edit a Group","type":1,"pageTitle":"Group","url":"docs/user-guide/users-and-groups/group#edit-a-group","content":"Description: Edit an existing group. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Users&quot; menu pointClick the &quot;Groups&quot; tab on the Users page to display all available groupsClick the pen icon next to the group you want to edit to open the &quot;Edit Group&quot; dialog  Type the user's ID into the field at the bottom of the dialog. After one or more characters are entered, a dropdown menu with suggested users will appear. Click the user in the dropdown to instantly add the user to the group. Note that the dropdown lists max. 6 user-suggestions - if the user you want to add is not visible in the dropdown, please enter more characters to search for the user. To remove any of the users that were already added, click the &quot;X&quot; next to the user's ID. note Users can be added to or removed from a group.ID and name of a group cannot be edited.A group cannot be deleted.Only an administrator can edit groups. "},{"title":"Permissions","type":0,"sectionRef":"#","url":"docs/user-guide/users-and-groups/permissions","content":"","keywords":""},{"title":"Global permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#global-permissions","content":"Description: All permissions not limited to projects, subprojects or workflowitems are global permissions. Global permissions can be added to users or to groups. All global permissions are documented at the bottom of this document. "},{"title":"New permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#new-permissions","content":"Description: Once a user/group is created, administrators can grant/revoke global permissions for them. "},{"title":"Admin permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#admin-permissions","content":"Description: A sample set of global permissions are: ... create projects... create user/group... grant/revoke global permissions to others... access the nodes section Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;User&quot; menu pointClick the lock item in line of the user that you want to grant/revoke permissions..Select the permissions that you want to grant/revoke  "},{"title":"Project permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#project-permissions","content":"Description: These section describes all permissions related to a project. Selecting a user or group grant them the specific permission and deselecting revoke them the specific permissions. Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the lock icon in the bottom right corner of a project to open the permissions dialogAfter selecting/deselecting certain users or groups click on submit to open a confirmationIf additional permissions are required the confirmation dialog lists these.Confirming the dialog first executes all additional actions listed if there are any, then grant/revoke the users/groupsIf no additional permissions have to be granted the users/groups are granted/revoked all selected permissions  note More information about a specific intent can be found in the project section.The user who created the project is automatically assigned to it.Granting assign permissions also grants view permission-permissions because it is needed in the assign process.More information about the confirmation dialog can be found in the confirmation section. "},{"title":"View permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#view-permissions","content":"Description: &quot;view project in overview&quot; : show the project on the overview site&quot;view project details&quot; : show the project's details by accessing the project details site note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details) "},{"title":"Write permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#write-permissions","content":"Description: &quot;Create subprojects&quot; : create a subproject&quot;Assign project to others&quot; : assign a user/group to a project&quot;Close project&quot; : close a project note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details) "},{"title":"Admin permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#admin-permissions-1","content":"Description: &quot;View permissions&quot; : show which user/group has which permission on the project&quot;Grant permissions&quot; - grant project permissions to a user/group&quot;Revoke permissions&quot; - revoke project permissions from a user/group note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details) "},{"title":"Subproject permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#subproject-permissions","content":"Description: These section describes all permissions related to a subproject Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the lock icon on the right of the subproject to open the permissions dialogAfter selecting/deselecting certain users or groups click on submit to open a confirmationIf additional permissions are required the confirmation dialog lists these.Confirming the dialog first executes all additional actions listed if there are any, then grant/revoke the users/groupsIf no additional permissions have to be granted the users/groups are granted/revoked all selected permissions  note More information about a specific action on a subproject can be found in the subproject section. "},{"title":"View permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#view-permissions-1","content":"Description: Following intents do exist related to view permissions of a subproject: &quot;view subproject overview&quot; : show the subproject on the project detail site&quot;view subproject details&quot; : show the subproject's details by accessing the subproject details site note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details)&quot;view project overview&quot; and &quot;view project details&quot; are also required to view a subproject "},{"title":"Write permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#write-permissions-1","content":"Description: Following intents do exist related to write permissions of a project: &quot;Create workflow items&quot; : create a workflowitem&quot;Update subproject&quot; : edit title, currency, comment or budget amount of the subproject&quot;Assign subproject&quot; : assign a user/group to the subproject&quot;Close subproject&quot; : close the subproject&quot;Reorder workflow items&quot; : reorder workflowitems that are not redacted/closed note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details) "},{"title":"Admin permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#admin-permissions-2","content":"Description: &quot;View subproject permissions&quot; : show which user/group has which permission on the subproject&quot;Grant subproject permissions&quot; - grant subproject permissions to a user/group&quot;Revoke subproject permissions&quot; - revoke subproject permissions from a user/group note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details) "},{"title":"Workflow permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#workflow-permissions","content":"Description: These section describes all permissions related to a workflowitem Instructions: Click the button in the upper left corner to open the side-navigation-barClick the &quot;Projects&quot; menu pointClick the blue magnifier icon in the bottom right corner of a projectClick the grey magnifier icon on the most right of the subproject you want to viewClick the lock icon on the right of the workflowitem to open the permissions dialogAfter selecting/deselecting certain users or groups click on submit to open a confirmationIf additional permissions are required the confirmation dialog lists these.Confirming the dialog first executes all additional actions listed if there are any, then grant/revoke the users/groupsIf no additional permissions have to be granted the users/groups are granted/revoked all selected permissions  note More information about a specific intent can be found in the workflowitem section.If a user has any write permission but no view permission the workflowitem is shown as redacted. ::: View permissions# Description: Following intents do exist related to view permissions of a subproject: &quot;View workflowitem&quot; : show the workflowitem' details on the subproject detail site If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details)&quot;view project overview&quot;, &quot;view project details&quot;, &quot;view subproject overview&quot; and &quot;view subproject details&quot; are also required to view a workflowitem ::: "},{"title":"Write permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#write-permissions-2","content":"Description: Following intents do exist related to write permissions of a project: &quot;Assign workflowitem&quot; : assign a user/group to the workflowitem&quot;Update workflowitem&quot; : edit title, comment, budget or add documents to the workflowitem note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details) "},{"title":"Admin permissions","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#admin-permissions-3","content":"Description: Following permissions do exist related to a workflowitem: &quot;View subproject permissions&quot; : show which user/group has which permission on the workflowitem&quot;Grant subproject permissions&quot; - grant workflowitem permissions to a user/group&quot;Revoke subproject permissions&quot; - revoke workflowitem permissions from a user/group note If the grantee has not all necessary view permissions yet a dialog opens which shows all required permissions. On confirm they are granted. (see confirmation for more Details) "},{"title":"Permission intents","type":1,"pageTitle":"Permissions","url":"docs/user-guide/users-and-groups/permissions#permission-intents","content":"Following list describes all existing permissions. If you need more information how you can make use of a specific permission, access the documentation of the specific section via the User-Guide overview. Intent\tDescriptionnetwork.listActive\tshow how many peers are connected to the current network in the upper right corner (currently logged in user excluded) global.listPermissions\tthe intent has no influence on the trubudget website global.grantPermission\tassign admin permissions to a user while creating a user global.grantAllPermissions\tassign admin permissions to a user while creating a user global.revokePermission\tthe intent has no influence on the trubudget website global.createProject\tcreate a project on the overview site global.createUser\tcreate a user with or without admin permissions (requires global.grantPermission) global.disableUser\tdisable a user (user is not able to login nor to be assigned, permissions persist) global.enableUser\tenable a user global.createGroup\tcreate a group with or without admin permissions group.addUser\tadd a user/group to a group group.removeUser\tadd a user/group to a group network.list\taccess the nodes site network.voteForPermission\tvote for a new organization to join the network network.approveNewOrganization\tapprove a new organization to join the network network.approveNewNodeForExistingOrganization\tapprove a new node for an existing organization project.viewSummary\tshow the project on the overview site project.viewDetails\tshow the project's details by accessing the project details site project.assign\tassign a user/group to the project project.update\tthe intent has no influence on the trubudget website project.intent.listPermissions\tshow which user/group has which permission on the project project.intent.grantPermission\tgrant project permissions to a user/group project.intent.revokePermission\trevoke project permissions from a user/group project.createSubproject\tcreate a subproject project.viewHistory\taccess the history of the project project.close\tclose the project subproject.viewSummary\tshow the subproject on the project detail site subproject.viewDetails\tshow the subproject's details by accessing the subproject details site subproject.assign\tassign a user/group to the subproject subproject.update\tedit title, currency, comment or budget amount of the subproject subproject.intent.listPermissions\tshow which user/group has which permission on the subproject subproject.intent.grantPermission\tgrant subproject permissions to a user/group subproject.intent.revokePermission\trevoke subproject permissions from a user/group subproject.createWorkflowitem\tcreate a workflowitem subproject.viewHistory\taccess the history of the subproject subproject.close\tclose the subproject subproject.reorderWorkflowitems\treorder workflowitems that are not redacted/closed workflowitem.view\tshow the workflowitem' details on the subproject detail site workflowitem.assign\tassign a user/group to the workflowitem workflowitem.update\tedit title, comment, budget or add documents to the workflowitem workflowitem.intent.listPermissions\tshow which user/group has which permission on the workflowitem workflowitem.intent.grantPermission\tgrant workflowitem permissions to a user/group workflowitem.intent.revokePermission\trevoke workflowitem permissions from a user/group "},{"title":"User","type":0,"sectionRef":"#","url":"docs/user-guide/users-and-groups/user","content":"","keywords":""},{"title":"View Users","type":1,"pageTitle":"User","url":"docs/user-guide/users-and-groups/user#view-users","content":"Description: View all users. Instructions: Click the button in the upper left corner (hamburger menu) to open the side-navigation-barClick &quot;Users&quot; Selection  note Users can only be viewed or created by an administrator. "},{"title":"Create User","type":1,"pageTitle":"User","url":"docs/user-guide/users-and-groups/user#create-user","content":"Description: Create a new User. Instructions: Click the button in the upper left corner (hamburger menu) to open the side-navigation-barClick &quot;Users&quot; SelectionClick the blue &quot;+&quot; button on the right to open the &quot;Add User&quot; dialog  Fill in the required fields: &quot;Full Name&quot;: Name displayed to other users&quot;Username&quot;: ID of the user e.g. for login&quot;Password&quot;: Password of user Click the &quot;Submit&quot;-button to create and save the new user. Once a user is created you can grant and revoke administrator permissions for the user, more details can be found at admin-permissions. note Only an administrator can create users of his/her organization!Users can be neither edited nor deleted. "},{"title":"Change a user's password","type":1,"pageTitle":"User","url":"docs/user-guide/users-and-groups/user#change-a-users-password","content":"Description:A user's password can be changed by anyone who has the permission user.changePassword for a given user. Starting with version v1.1.0 every user is granted the permission to change his/her own password upon creation . If another user should be able to change a user's password (like an administrator), this permission needs to be granted via the /users.intent.grantPermission endpoint. The root user can always change passwords and grant the necessary permissions. Examples: User mstein wants to change his own password, but does not have the permission to do so. The root user needs to grant mstein the permission user.changePassword. Once this is done, mstein can change his own password.User mstein is an administrator and should be able to change the password of dviolin. The root user needs to grant the user.changePassword permission to mstein for dviolin. After that, mstein is able to change the password of dviolin. Instructions: Click the button in the upper left corner (hamburger menu) to open the side-navigation-barClick &quot;Users&quot; SelectionClick the &quot;Edit&quot; button (looks like a pen) next to the user you want to change the password forType in your passwordType in the new password for the selected userRe-type the new password to confirm itClick &quot;Submit&quot; to save the new password note To change a user's password, you must type in your password first "},{"title":"Enable User","type":1,"pageTitle":"User","url":"docs/user-guide/users-and-groups/user#enable-user","content":"Description: Enable disabled User. Instructions: Click the button in the upper left corner (hamburger menu) to open the side-navigation-bar.Click &quot;Users&quot; Selection.Click &quot;Disabled users&quot; tabClick the &quot;Restore user&quot; button (looks like a white check mark symbol) next to the user you want to enable.  A confirmation dialog will be show. Click &quot;Disable user&quot; to confirm the activation. note Only a user with the user.enable-permission can enable users of his/her organization! "},{"title":"Disable User","type":1,"pageTitle":"User","url":"docs/user-guide/users-and-groups/user#disable-user","content":"Description: Disable an User. Instructions: Click the button in the upper left corner (hamburger menu) to open the side-navigation-bar.Click &quot;Users&quot; Selection.Click the &quot;Disable user&quot; button (looks like a white minus symbol) next to the user you want to disable.  A confirmation dialog will be shown. Click &quot;Disable user&quot; to confirm the deactivation. note Only a user with the user.disable-permission can disable users of his/her organization! When disabled user tried to log in a &quot;Login ID is disabled&quot; message will pop up. "}]